// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm_demo/staging/model"
)

func newInbox(db *gorm.DB, opts ...gen.DOOption) inbox {
	_inbox := inbox{}

	_inbox.inboxDo.UseDB(db, opts...)
	_inbox.inboxDo.UseModel(&model.Inbox{})

	tableName := _inbox.inboxDo.TableName()
	_inbox.ALL = field.NewAsterisk(tableName)
	_inbox.CreatedAt = field.NewInt64(tableName, "created_at")
	_inbox.CreatedBy = field.NewString(tableName, "created_by")
	_inbox.ModifiedAt = field.NewInt64(tableName, "modified_at")
	_inbox.ModifiedBy = field.NewString(tableName, "modified_by")
	_inbox.DeletedAt = field.NewInt64(tableName, "deleted_at")
	_inbox.DeletedBy = field.NewString(tableName, "deleted_by")
	_inbox.InboxID = field.NewString(tableName, "inbox_id")
	_inbox.Header = field.NewString(tableName, "header")
	_inbox.Title = field.NewString(tableName, "title")
	_inbox.InboxType = field.NewString(tableName, "inbox_type")
	_inbox.ReferenceID = field.NewString(tableName, "reference_id")
	_inbox.IsUnread = field.NewBool(tableName, "is_unread")

	_inbox.fillFieldMap()

	return _inbox
}

type inbox struct {
	inboxDo

	ALL         field.Asterisk
	CreatedAt   field.Int64
	CreatedBy   field.String
	ModifiedAt  field.Int64
	ModifiedBy  field.String
	DeletedAt   field.Int64
	DeletedBy   field.String
	InboxID     field.String
	Header      field.String
	Title       field.String
	InboxType   field.String // ORDERS|INFO|PROMO
	ReferenceID field.String
	IsUnread    field.Bool

	fieldMap map[string]field.Expr
}

func (i inbox) Table(newTableName string) *inbox {
	i.inboxDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i inbox) As(alias string) *inbox {
	i.inboxDo.DO = *(i.inboxDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *inbox) updateTableName(table string) *inbox {
	i.ALL = field.NewAsterisk(table)
	i.CreatedAt = field.NewInt64(table, "created_at")
	i.CreatedBy = field.NewString(table, "created_by")
	i.ModifiedAt = field.NewInt64(table, "modified_at")
	i.ModifiedBy = field.NewString(table, "modified_by")
	i.DeletedAt = field.NewInt64(table, "deleted_at")
	i.DeletedBy = field.NewString(table, "deleted_by")
	i.InboxID = field.NewString(table, "inbox_id")
	i.Header = field.NewString(table, "header")
	i.Title = field.NewString(table, "title")
	i.InboxType = field.NewString(table, "inbox_type")
	i.ReferenceID = field.NewString(table, "reference_id")
	i.IsUnread = field.NewBool(table, "is_unread")

	i.fillFieldMap()

	return i
}

func (i *inbox) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *inbox) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 12)
	i.fieldMap["created_at"] = i.CreatedAt
	i.fieldMap["created_by"] = i.CreatedBy
	i.fieldMap["modified_at"] = i.ModifiedAt
	i.fieldMap["modified_by"] = i.ModifiedBy
	i.fieldMap["deleted_at"] = i.DeletedAt
	i.fieldMap["deleted_by"] = i.DeletedBy
	i.fieldMap["inbox_id"] = i.InboxID
	i.fieldMap["header"] = i.Header
	i.fieldMap["title"] = i.Title
	i.fieldMap["inbox_type"] = i.InboxType
	i.fieldMap["reference_id"] = i.ReferenceID
	i.fieldMap["is_unread"] = i.IsUnread
}

func (i inbox) clone(db *gorm.DB) inbox {
	i.inboxDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i inbox) replaceDB(db *gorm.DB) inbox {
	i.inboxDo.ReplaceDB(db)
	return i
}

type inboxDo struct{ gen.DO }

type IInboxDo interface {
	gen.SubQuery
	Debug() IInboxDo
	WithContext(ctx context.Context) IInboxDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IInboxDo
	WriteDB() IInboxDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IInboxDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IInboxDo
	Not(conds ...gen.Condition) IInboxDo
	Or(conds ...gen.Condition) IInboxDo
	Select(conds ...field.Expr) IInboxDo
	Where(conds ...gen.Condition) IInboxDo
	Order(conds ...field.Expr) IInboxDo
	Distinct(cols ...field.Expr) IInboxDo
	Omit(cols ...field.Expr) IInboxDo
	Join(table schema.Tabler, on ...field.Expr) IInboxDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IInboxDo
	RightJoin(table schema.Tabler, on ...field.Expr) IInboxDo
	Group(cols ...field.Expr) IInboxDo
	Having(conds ...gen.Condition) IInboxDo
	Limit(limit int) IInboxDo
	Offset(offset int) IInboxDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IInboxDo
	Unscoped() IInboxDo
	Create(values ...*model.Inbox) error
	CreateInBatches(values []*model.Inbox, batchSize int) error
	Save(values ...*model.Inbox) error
	First() (*model.Inbox, error)
	Take() (*model.Inbox, error)
	Last() (*model.Inbox, error)
	Find() ([]*model.Inbox, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Inbox, err error)
	FindInBatches(result *[]*model.Inbox, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Inbox) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IInboxDo
	Assign(attrs ...field.AssignExpr) IInboxDo
	Joins(fields ...field.RelationField) IInboxDo
	Preload(fields ...field.RelationField) IInboxDo
	FirstOrInit() (*model.Inbox, error)
	FirstOrCreate() (*model.Inbox, error)
	FindByPage(offset int, limit int) (result []*model.Inbox, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IInboxDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i inboxDo) Debug() IInboxDo {
	return i.withDO(i.DO.Debug())
}

func (i inboxDo) WithContext(ctx context.Context) IInboxDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i inboxDo) ReadDB() IInboxDo {
	return i.Clauses(dbresolver.Read)
}

func (i inboxDo) WriteDB() IInboxDo {
	return i.Clauses(dbresolver.Write)
}

func (i inboxDo) Session(config *gorm.Session) IInboxDo {
	return i.withDO(i.DO.Session(config))
}

func (i inboxDo) Clauses(conds ...clause.Expression) IInboxDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i inboxDo) Returning(value interface{}, columns ...string) IInboxDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i inboxDo) Not(conds ...gen.Condition) IInboxDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i inboxDo) Or(conds ...gen.Condition) IInboxDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i inboxDo) Select(conds ...field.Expr) IInboxDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i inboxDo) Where(conds ...gen.Condition) IInboxDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i inboxDo) Order(conds ...field.Expr) IInboxDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i inboxDo) Distinct(cols ...field.Expr) IInboxDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i inboxDo) Omit(cols ...field.Expr) IInboxDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i inboxDo) Join(table schema.Tabler, on ...field.Expr) IInboxDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i inboxDo) LeftJoin(table schema.Tabler, on ...field.Expr) IInboxDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i inboxDo) RightJoin(table schema.Tabler, on ...field.Expr) IInboxDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i inboxDo) Group(cols ...field.Expr) IInboxDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i inboxDo) Having(conds ...gen.Condition) IInboxDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i inboxDo) Limit(limit int) IInboxDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i inboxDo) Offset(offset int) IInboxDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i inboxDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IInboxDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i inboxDo) Unscoped() IInboxDo {
	return i.withDO(i.DO.Unscoped())
}

func (i inboxDo) Create(values ...*model.Inbox) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i inboxDo) CreateInBatches(values []*model.Inbox, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i inboxDo) Save(values ...*model.Inbox) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i inboxDo) First() (*model.Inbox, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Inbox), nil
	}
}

func (i inboxDo) Take() (*model.Inbox, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Inbox), nil
	}
}

func (i inboxDo) Last() (*model.Inbox, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Inbox), nil
	}
}

func (i inboxDo) Find() ([]*model.Inbox, error) {
	result, err := i.DO.Find()
	return result.([]*model.Inbox), err
}

func (i inboxDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Inbox, err error) {
	buf := make([]*model.Inbox, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i inboxDo) FindInBatches(result *[]*model.Inbox, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i inboxDo) Attrs(attrs ...field.AssignExpr) IInboxDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i inboxDo) Assign(attrs ...field.AssignExpr) IInboxDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i inboxDo) Joins(fields ...field.RelationField) IInboxDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i inboxDo) Preload(fields ...field.RelationField) IInboxDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i inboxDo) FirstOrInit() (*model.Inbox, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Inbox), nil
	}
}

func (i inboxDo) FirstOrCreate() (*model.Inbox, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Inbox), nil
	}
}

func (i inboxDo) FindByPage(offset int, limit int) (result []*model.Inbox, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i inboxDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i inboxDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i inboxDo) Delete(models ...*model.Inbox) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *inboxDo) withDO(do gen.Dao) *inboxDo {
	i.DO = *do.(*gen.DO)
	return i
}
