// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm_demo/staging/model"
)

func newOutletSectionMenu(db *gorm.DB, opts ...gen.DOOption) outletSectionMenu {
	_outletSectionMenu := outletSectionMenu{}

	_outletSectionMenu.outletSectionMenuDo.UseDB(db, opts...)
	_outletSectionMenu.outletSectionMenuDo.UseModel(&model.OutletSectionMenu{})

	tableName := _outletSectionMenu.outletSectionMenuDo.TableName()
	_outletSectionMenu.ALL = field.NewAsterisk(tableName)
	_outletSectionMenu.CreatedAt = field.NewInt64(tableName, "created_at")
	_outletSectionMenu.CreatedBy = field.NewString(tableName, "created_by")
	_outletSectionMenu.OutletSmID = field.NewInt64(tableName, "outlet_sm_id")
	_outletSectionMenu.OutletSectionID = field.NewString(tableName, "outlet_section_id")
	_outletSectionMenu.OutletMenuID = field.NewString(tableName, "outlet_menu_id")

	_outletSectionMenu.fillFieldMap()

	return _outletSectionMenu
}

type outletSectionMenu struct {
	outletSectionMenuDo

	ALL             field.Asterisk
	CreatedAt       field.Int64
	CreatedBy       field.String
	OutletSmID      field.Int64
	OutletSectionID field.String
	OutletMenuID    field.String

	fieldMap map[string]field.Expr
}

func (o outletSectionMenu) Table(newTableName string) *outletSectionMenu {
	o.outletSectionMenuDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o outletSectionMenu) As(alias string) *outletSectionMenu {
	o.outletSectionMenuDo.DO = *(o.outletSectionMenuDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *outletSectionMenu) updateTableName(table string) *outletSectionMenu {
	o.ALL = field.NewAsterisk(table)
	o.CreatedAt = field.NewInt64(table, "created_at")
	o.CreatedBy = field.NewString(table, "created_by")
	o.OutletSmID = field.NewInt64(table, "outlet_sm_id")
	o.OutletSectionID = field.NewString(table, "outlet_section_id")
	o.OutletMenuID = field.NewString(table, "outlet_menu_id")

	o.fillFieldMap()

	return o
}

func (o *outletSectionMenu) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *outletSectionMenu) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 5)
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["created_by"] = o.CreatedBy
	o.fieldMap["outlet_sm_id"] = o.OutletSmID
	o.fieldMap["outlet_section_id"] = o.OutletSectionID
	o.fieldMap["outlet_menu_id"] = o.OutletMenuID
}

func (o outletSectionMenu) clone(db *gorm.DB) outletSectionMenu {
	o.outletSectionMenuDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o outletSectionMenu) replaceDB(db *gorm.DB) outletSectionMenu {
	o.outletSectionMenuDo.ReplaceDB(db)
	return o
}

type outletSectionMenuDo struct{ gen.DO }

type IOutletSectionMenuDo interface {
	gen.SubQuery
	Debug() IOutletSectionMenuDo
	WithContext(ctx context.Context) IOutletSectionMenuDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOutletSectionMenuDo
	WriteDB() IOutletSectionMenuDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOutletSectionMenuDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOutletSectionMenuDo
	Not(conds ...gen.Condition) IOutletSectionMenuDo
	Or(conds ...gen.Condition) IOutletSectionMenuDo
	Select(conds ...field.Expr) IOutletSectionMenuDo
	Where(conds ...gen.Condition) IOutletSectionMenuDo
	Order(conds ...field.Expr) IOutletSectionMenuDo
	Distinct(cols ...field.Expr) IOutletSectionMenuDo
	Omit(cols ...field.Expr) IOutletSectionMenuDo
	Join(table schema.Tabler, on ...field.Expr) IOutletSectionMenuDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOutletSectionMenuDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOutletSectionMenuDo
	Group(cols ...field.Expr) IOutletSectionMenuDo
	Having(conds ...gen.Condition) IOutletSectionMenuDo
	Limit(limit int) IOutletSectionMenuDo
	Offset(offset int) IOutletSectionMenuDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOutletSectionMenuDo
	Unscoped() IOutletSectionMenuDo
	Create(values ...*model.OutletSectionMenu) error
	CreateInBatches(values []*model.OutletSectionMenu, batchSize int) error
	Save(values ...*model.OutletSectionMenu) error
	First() (*model.OutletSectionMenu, error)
	Take() (*model.OutletSectionMenu, error)
	Last() (*model.OutletSectionMenu, error)
	Find() ([]*model.OutletSectionMenu, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OutletSectionMenu, err error)
	FindInBatches(result *[]*model.OutletSectionMenu, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OutletSectionMenu) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOutletSectionMenuDo
	Assign(attrs ...field.AssignExpr) IOutletSectionMenuDo
	Joins(fields ...field.RelationField) IOutletSectionMenuDo
	Preload(fields ...field.RelationField) IOutletSectionMenuDo
	FirstOrInit() (*model.OutletSectionMenu, error)
	FirstOrCreate() (*model.OutletSectionMenu, error)
	FindByPage(offset int, limit int) (result []*model.OutletSectionMenu, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOutletSectionMenuDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o outletSectionMenuDo) Debug() IOutletSectionMenuDo {
	return o.withDO(o.DO.Debug())
}

func (o outletSectionMenuDo) WithContext(ctx context.Context) IOutletSectionMenuDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o outletSectionMenuDo) ReadDB() IOutletSectionMenuDo {
	return o.Clauses(dbresolver.Read)
}

func (o outletSectionMenuDo) WriteDB() IOutletSectionMenuDo {
	return o.Clauses(dbresolver.Write)
}

func (o outletSectionMenuDo) Session(config *gorm.Session) IOutletSectionMenuDo {
	return o.withDO(o.DO.Session(config))
}

func (o outletSectionMenuDo) Clauses(conds ...clause.Expression) IOutletSectionMenuDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o outletSectionMenuDo) Returning(value interface{}, columns ...string) IOutletSectionMenuDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o outletSectionMenuDo) Not(conds ...gen.Condition) IOutletSectionMenuDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o outletSectionMenuDo) Or(conds ...gen.Condition) IOutletSectionMenuDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o outletSectionMenuDo) Select(conds ...field.Expr) IOutletSectionMenuDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o outletSectionMenuDo) Where(conds ...gen.Condition) IOutletSectionMenuDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o outletSectionMenuDo) Order(conds ...field.Expr) IOutletSectionMenuDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o outletSectionMenuDo) Distinct(cols ...field.Expr) IOutletSectionMenuDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o outletSectionMenuDo) Omit(cols ...field.Expr) IOutletSectionMenuDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o outletSectionMenuDo) Join(table schema.Tabler, on ...field.Expr) IOutletSectionMenuDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o outletSectionMenuDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOutletSectionMenuDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o outletSectionMenuDo) RightJoin(table schema.Tabler, on ...field.Expr) IOutletSectionMenuDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o outletSectionMenuDo) Group(cols ...field.Expr) IOutletSectionMenuDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o outletSectionMenuDo) Having(conds ...gen.Condition) IOutletSectionMenuDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o outletSectionMenuDo) Limit(limit int) IOutletSectionMenuDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o outletSectionMenuDo) Offset(offset int) IOutletSectionMenuDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o outletSectionMenuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOutletSectionMenuDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o outletSectionMenuDo) Unscoped() IOutletSectionMenuDo {
	return o.withDO(o.DO.Unscoped())
}

func (o outletSectionMenuDo) Create(values ...*model.OutletSectionMenu) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o outletSectionMenuDo) CreateInBatches(values []*model.OutletSectionMenu, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o outletSectionMenuDo) Save(values ...*model.OutletSectionMenu) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o outletSectionMenuDo) First() (*model.OutletSectionMenu, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OutletSectionMenu), nil
	}
}

func (o outletSectionMenuDo) Take() (*model.OutletSectionMenu, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OutletSectionMenu), nil
	}
}

func (o outletSectionMenuDo) Last() (*model.OutletSectionMenu, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OutletSectionMenu), nil
	}
}

func (o outletSectionMenuDo) Find() ([]*model.OutletSectionMenu, error) {
	result, err := o.DO.Find()
	return result.([]*model.OutletSectionMenu), err
}

func (o outletSectionMenuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OutletSectionMenu, err error) {
	buf := make([]*model.OutletSectionMenu, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o outletSectionMenuDo) FindInBatches(result *[]*model.OutletSectionMenu, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o outletSectionMenuDo) Attrs(attrs ...field.AssignExpr) IOutletSectionMenuDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o outletSectionMenuDo) Assign(attrs ...field.AssignExpr) IOutletSectionMenuDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o outletSectionMenuDo) Joins(fields ...field.RelationField) IOutletSectionMenuDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o outletSectionMenuDo) Preload(fields ...field.RelationField) IOutletSectionMenuDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o outletSectionMenuDo) FirstOrInit() (*model.OutletSectionMenu, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OutletSectionMenu), nil
	}
}

func (o outletSectionMenuDo) FirstOrCreate() (*model.OutletSectionMenu, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OutletSectionMenu), nil
	}
}

func (o outletSectionMenuDo) FindByPage(offset int, limit int) (result []*model.OutletSectionMenu, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o outletSectionMenuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o outletSectionMenuDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o outletSectionMenuDo) Delete(models ...*model.OutletSectionMenu) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *outletSectionMenuDo) withDO(do gen.Dao) *outletSectionMenuDo {
	o.DO = *do.(*gen.DO)
	return o
}
