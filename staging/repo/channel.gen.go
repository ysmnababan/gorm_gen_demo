// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm_demo/staging/model"
)

func newChannel(db *gorm.DB, opts ...gen.DOOption) channel {
	_channel := channel{}

	_channel.channelDo.UseDB(db, opts...)
	_channel.channelDo.UseModel(&model.Channel{})

	tableName := _channel.channelDo.TableName()
	_channel.ALL = field.NewAsterisk(tableName)
	_channel.CreatedAt = field.NewInt64(tableName, "created_at")
	_channel.CreatedBy = field.NewString(tableName, "created_by")
	_channel.ModifiedAt = field.NewInt64(tableName, "modified_at")
	_channel.ModifiedBy = field.NewString(tableName, "modified_by")
	_channel.DeletedAt = field.NewInt64(tableName, "deleted_at")
	_channel.DeletedBy = field.NewString(tableName, "deleted_by")
	_channel.ChannelID = field.NewString(tableName, "channel_id")
	_channel.ChannelCode = field.NewString(tableName, "channel_code")
	_channel.ChannelName = field.NewString(tableName, "channel_name")
	_channel.SortOrder = field.NewInt32(tableName, "sort_order")
	_channel.URLIcon = field.NewString(tableName, "url_icon")

	_channel.fillFieldMap()

	return _channel
}

type channel struct {
	channelDo

	ALL         field.Asterisk
	CreatedAt   field.Int64
	CreatedBy   field.String
	ModifiedAt  field.Int64
	ModifiedBy  field.String
	DeletedAt   field.Int64
	DeletedBy   field.String
	ChannelID   field.String
	ChannelCode field.String
	ChannelName field.String
	SortOrder   field.Int32
	URLIcon     field.String

	fieldMap map[string]field.Expr
}

func (c channel) Table(newTableName string) *channel {
	c.channelDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c channel) As(alias string) *channel {
	c.channelDo.DO = *(c.channelDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *channel) updateTableName(table string) *channel {
	c.ALL = field.NewAsterisk(table)
	c.CreatedAt = field.NewInt64(table, "created_at")
	c.CreatedBy = field.NewString(table, "created_by")
	c.ModifiedAt = field.NewInt64(table, "modified_at")
	c.ModifiedBy = field.NewString(table, "modified_by")
	c.DeletedAt = field.NewInt64(table, "deleted_at")
	c.DeletedBy = field.NewString(table, "deleted_by")
	c.ChannelID = field.NewString(table, "channel_id")
	c.ChannelCode = field.NewString(table, "channel_code")
	c.ChannelName = field.NewString(table, "channel_name")
	c.SortOrder = field.NewInt32(table, "sort_order")
	c.URLIcon = field.NewString(table, "url_icon")

	c.fillFieldMap()

	return c
}

func (c *channel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *channel) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 11)
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["created_by"] = c.CreatedBy
	c.fieldMap["modified_at"] = c.ModifiedAt
	c.fieldMap["modified_by"] = c.ModifiedBy
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["deleted_by"] = c.DeletedBy
	c.fieldMap["channel_id"] = c.ChannelID
	c.fieldMap["channel_code"] = c.ChannelCode
	c.fieldMap["channel_name"] = c.ChannelName
	c.fieldMap["sort_order"] = c.SortOrder
	c.fieldMap["url_icon"] = c.URLIcon
}

func (c channel) clone(db *gorm.DB) channel {
	c.channelDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c channel) replaceDB(db *gorm.DB) channel {
	c.channelDo.ReplaceDB(db)
	return c
}

type channelDo struct{ gen.DO }

type IChannelDo interface {
	gen.SubQuery
	Debug() IChannelDo
	WithContext(ctx context.Context) IChannelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IChannelDo
	WriteDB() IChannelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IChannelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IChannelDo
	Not(conds ...gen.Condition) IChannelDo
	Or(conds ...gen.Condition) IChannelDo
	Select(conds ...field.Expr) IChannelDo
	Where(conds ...gen.Condition) IChannelDo
	Order(conds ...field.Expr) IChannelDo
	Distinct(cols ...field.Expr) IChannelDo
	Omit(cols ...field.Expr) IChannelDo
	Join(table schema.Tabler, on ...field.Expr) IChannelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IChannelDo
	RightJoin(table schema.Tabler, on ...field.Expr) IChannelDo
	Group(cols ...field.Expr) IChannelDo
	Having(conds ...gen.Condition) IChannelDo
	Limit(limit int) IChannelDo
	Offset(offset int) IChannelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IChannelDo
	Unscoped() IChannelDo
	Create(values ...*model.Channel) error
	CreateInBatches(values []*model.Channel, batchSize int) error
	Save(values ...*model.Channel) error
	First() (*model.Channel, error)
	Take() (*model.Channel, error)
	Last() (*model.Channel, error)
	Find() ([]*model.Channel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Channel, err error)
	FindInBatches(result *[]*model.Channel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Channel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IChannelDo
	Assign(attrs ...field.AssignExpr) IChannelDo
	Joins(fields ...field.RelationField) IChannelDo
	Preload(fields ...field.RelationField) IChannelDo
	FirstOrInit() (*model.Channel, error)
	FirstOrCreate() (*model.Channel, error)
	FindByPage(offset int, limit int) (result []*model.Channel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IChannelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c channelDo) Debug() IChannelDo {
	return c.withDO(c.DO.Debug())
}

func (c channelDo) WithContext(ctx context.Context) IChannelDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c channelDo) ReadDB() IChannelDo {
	return c.Clauses(dbresolver.Read)
}

func (c channelDo) WriteDB() IChannelDo {
	return c.Clauses(dbresolver.Write)
}

func (c channelDo) Session(config *gorm.Session) IChannelDo {
	return c.withDO(c.DO.Session(config))
}

func (c channelDo) Clauses(conds ...clause.Expression) IChannelDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c channelDo) Returning(value interface{}, columns ...string) IChannelDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c channelDo) Not(conds ...gen.Condition) IChannelDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c channelDo) Or(conds ...gen.Condition) IChannelDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c channelDo) Select(conds ...field.Expr) IChannelDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c channelDo) Where(conds ...gen.Condition) IChannelDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c channelDo) Order(conds ...field.Expr) IChannelDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c channelDo) Distinct(cols ...field.Expr) IChannelDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c channelDo) Omit(cols ...field.Expr) IChannelDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c channelDo) Join(table schema.Tabler, on ...field.Expr) IChannelDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c channelDo) LeftJoin(table schema.Tabler, on ...field.Expr) IChannelDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c channelDo) RightJoin(table schema.Tabler, on ...field.Expr) IChannelDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c channelDo) Group(cols ...field.Expr) IChannelDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c channelDo) Having(conds ...gen.Condition) IChannelDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c channelDo) Limit(limit int) IChannelDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c channelDo) Offset(offset int) IChannelDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c channelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IChannelDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c channelDo) Unscoped() IChannelDo {
	return c.withDO(c.DO.Unscoped())
}

func (c channelDo) Create(values ...*model.Channel) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c channelDo) CreateInBatches(values []*model.Channel, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c channelDo) Save(values ...*model.Channel) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c channelDo) First() (*model.Channel, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Channel), nil
	}
}

func (c channelDo) Take() (*model.Channel, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Channel), nil
	}
}

func (c channelDo) Last() (*model.Channel, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Channel), nil
	}
}

func (c channelDo) Find() ([]*model.Channel, error) {
	result, err := c.DO.Find()
	return result.([]*model.Channel), err
}

func (c channelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Channel, err error) {
	buf := make([]*model.Channel, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c channelDo) FindInBatches(result *[]*model.Channel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c channelDo) Attrs(attrs ...field.AssignExpr) IChannelDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c channelDo) Assign(attrs ...field.AssignExpr) IChannelDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c channelDo) Joins(fields ...field.RelationField) IChannelDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c channelDo) Preload(fields ...field.RelationField) IChannelDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c channelDo) FirstOrInit() (*model.Channel, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Channel), nil
	}
}

func (c channelDo) FirstOrCreate() (*model.Channel, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Channel), nil
	}
}

func (c channelDo) FindByPage(offset int, limit int) (result []*model.Channel, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c channelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c channelDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c channelDo) Delete(models ...*model.Channel) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *channelDo) withDO(do gen.Dao) *channelDo {
	c.DO = *do.(*gen.DO)
	return c
}
