// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm_demo/staging/model"
)

func newInboxCustomer(db *gorm.DB, opts ...gen.DOOption) inboxCustomer {
	_inboxCustomer := inboxCustomer{}

	_inboxCustomer.inboxCustomerDo.UseDB(db, opts...)
	_inboxCustomer.inboxCustomerDo.UseModel(&model.InboxCustomer{})

	tableName := _inboxCustomer.inboxCustomerDo.TableName()
	_inboxCustomer.ALL = field.NewAsterisk(tableName)
	_inboxCustomer.InboxCustomerID = field.NewString(tableName, "inbox_customer_id")
	_inboxCustomer.CustomerID = field.NewString(tableName, "customer_id")
	_inboxCustomer.InboxID = field.NewString(tableName, "inbox_id")

	_inboxCustomer.fillFieldMap()

	return _inboxCustomer
}

type inboxCustomer struct {
	inboxCustomerDo

	ALL             field.Asterisk
	InboxCustomerID field.String
	CustomerID      field.String
	InboxID         field.String

	fieldMap map[string]field.Expr
}

func (i inboxCustomer) Table(newTableName string) *inboxCustomer {
	i.inboxCustomerDo.UseTable(newTableName)
	return i.updateTableName(newTableName)
}

func (i inboxCustomer) As(alias string) *inboxCustomer {
	i.inboxCustomerDo.DO = *(i.inboxCustomerDo.As(alias).(*gen.DO))
	return i.updateTableName(alias)
}

func (i *inboxCustomer) updateTableName(table string) *inboxCustomer {
	i.ALL = field.NewAsterisk(table)
	i.InboxCustomerID = field.NewString(table, "inbox_customer_id")
	i.CustomerID = field.NewString(table, "customer_id")
	i.InboxID = field.NewString(table, "inbox_id")

	i.fillFieldMap()

	return i
}

func (i *inboxCustomer) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := i.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (i *inboxCustomer) fillFieldMap() {
	i.fieldMap = make(map[string]field.Expr, 3)
	i.fieldMap["inbox_customer_id"] = i.InboxCustomerID
	i.fieldMap["customer_id"] = i.CustomerID
	i.fieldMap["inbox_id"] = i.InboxID
}

func (i inboxCustomer) clone(db *gorm.DB) inboxCustomer {
	i.inboxCustomerDo.ReplaceConnPool(db.Statement.ConnPool)
	return i
}

func (i inboxCustomer) replaceDB(db *gorm.DB) inboxCustomer {
	i.inboxCustomerDo.ReplaceDB(db)
	return i
}

type inboxCustomerDo struct{ gen.DO }

type IInboxCustomerDo interface {
	gen.SubQuery
	Debug() IInboxCustomerDo
	WithContext(ctx context.Context) IInboxCustomerDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IInboxCustomerDo
	WriteDB() IInboxCustomerDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IInboxCustomerDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IInboxCustomerDo
	Not(conds ...gen.Condition) IInboxCustomerDo
	Or(conds ...gen.Condition) IInboxCustomerDo
	Select(conds ...field.Expr) IInboxCustomerDo
	Where(conds ...gen.Condition) IInboxCustomerDo
	Order(conds ...field.Expr) IInboxCustomerDo
	Distinct(cols ...field.Expr) IInboxCustomerDo
	Omit(cols ...field.Expr) IInboxCustomerDo
	Join(table schema.Tabler, on ...field.Expr) IInboxCustomerDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IInboxCustomerDo
	RightJoin(table schema.Tabler, on ...field.Expr) IInboxCustomerDo
	Group(cols ...field.Expr) IInboxCustomerDo
	Having(conds ...gen.Condition) IInboxCustomerDo
	Limit(limit int) IInboxCustomerDo
	Offset(offset int) IInboxCustomerDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IInboxCustomerDo
	Unscoped() IInboxCustomerDo
	Create(values ...*model.InboxCustomer) error
	CreateInBatches(values []*model.InboxCustomer, batchSize int) error
	Save(values ...*model.InboxCustomer) error
	First() (*model.InboxCustomer, error)
	Take() (*model.InboxCustomer, error)
	Last() (*model.InboxCustomer, error)
	Find() ([]*model.InboxCustomer, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.InboxCustomer, err error)
	FindInBatches(result *[]*model.InboxCustomer, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.InboxCustomer) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IInboxCustomerDo
	Assign(attrs ...field.AssignExpr) IInboxCustomerDo
	Joins(fields ...field.RelationField) IInboxCustomerDo
	Preload(fields ...field.RelationField) IInboxCustomerDo
	FirstOrInit() (*model.InboxCustomer, error)
	FirstOrCreate() (*model.InboxCustomer, error)
	FindByPage(offset int, limit int) (result []*model.InboxCustomer, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IInboxCustomerDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (i inboxCustomerDo) Debug() IInboxCustomerDo {
	return i.withDO(i.DO.Debug())
}

func (i inboxCustomerDo) WithContext(ctx context.Context) IInboxCustomerDo {
	return i.withDO(i.DO.WithContext(ctx))
}

func (i inboxCustomerDo) ReadDB() IInboxCustomerDo {
	return i.Clauses(dbresolver.Read)
}

func (i inboxCustomerDo) WriteDB() IInboxCustomerDo {
	return i.Clauses(dbresolver.Write)
}

func (i inboxCustomerDo) Session(config *gorm.Session) IInboxCustomerDo {
	return i.withDO(i.DO.Session(config))
}

func (i inboxCustomerDo) Clauses(conds ...clause.Expression) IInboxCustomerDo {
	return i.withDO(i.DO.Clauses(conds...))
}

func (i inboxCustomerDo) Returning(value interface{}, columns ...string) IInboxCustomerDo {
	return i.withDO(i.DO.Returning(value, columns...))
}

func (i inboxCustomerDo) Not(conds ...gen.Condition) IInboxCustomerDo {
	return i.withDO(i.DO.Not(conds...))
}

func (i inboxCustomerDo) Or(conds ...gen.Condition) IInboxCustomerDo {
	return i.withDO(i.DO.Or(conds...))
}

func (i inboxCustomerDo) Select(conds ...field.Expr) IInboxCustomerDo {
	return i.withDO(i.DO.Select(conds...))
}

func (i inboxCustomerDo) Where(conds ...gen.Condition) IInboxCustomerDo {
	return i.withDO(i.DO.Where(conds...))
}

func (i inboxCustomerDo) Order(conds ...field.Expr) IInboxCustomerDo {
	return i.withDO(i.DO.Order(conds...))
}

func (i inboxCustomerDo) Distinct(cols ...field.Expr) IInboxCustomerDo {
	return i.withDO(i.DO.Distinct(cols...))
}

func (i inboxCustomerDo) Omit(cols ...field.Expr) IInboxCustomerDo {
	return i.withDO(i.DO.Omit(cols...))
}

func (i inboxCustomerDo) Join(table schema.Tabler, on ...field.Expr) IInboxCustomerDo {
	return i.withDO(i.DO.Join(table, on...))
}

func (i inboxCustomerDo) LeftJoin(table schema.Tabler, on ...field.Expr) IInboxCustomerDo {
	return i.withDO(i.DO.LeftJoin(table, on...))
}

func (i inboxCustomerDo) RightJoin(table schema.Tabler, on ...field.Expr) IInboxCustomerDo {
	return i.withDO(i.DO.RightJoin(table, on...))
}

func (i inboxCustomerDo) Group(cols ...field.Expr) IInboxCustomerDo {
	return i.withDO(i.DO.Group(cols...))
}

func (i inboxCustomerDo) Having(conds ...gen.Condition) IInboxCustomerDo {
	return i.withDO(i.DO.Having(conds...))
}

func (i inboxCustomerDo) Limit(limit int) IInboxCustomerDo {
	return i.withDO(i.DO.Limit(limit))
}

func (i inboxCustomerDo) Offset(offset int) IInboxCustomerDo {
	return i.withDO(i.DO.Offset(offset))
}

func (i inboxCustomerDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IInboxCustomerDo {
	return i.withDO(i.DO.Scopes(funcs...))
}

func (i inboxCustomerDo) Unscoped() IInboxCustomerDo {
	return i.withDO(i.DO.Unscoped())
}

func (i inboxCustomerDo) Create(values ...*model.InboxCustomer) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Create(values)
}

func (i inboxCustomerDo) CreateInBatches(values []*model.InboxCustomer, batchSize int) error {
	return i.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (i inboxCustomerDo) Save(values ...*model.InboxCustomer) error {
	if len(values) == 0 {
		return nil
	}
	return i.DO.Save(values)
}

func (i inboxCustomerDo) First() (*model.InboxCustomer, error) {
	if result, err := i.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.InboxCustomer), nil
	}
}

func (i inboxCustomerDo) Take() (*model.InboxCustomer, error) {
	if result, err := i.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.InboxCustomer), nil
	}
}

func (i inboxCustomerDo) Last() (*model.InboxCustomer, error) {
	if result, err := i.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.InboxCustomer), nil
	}
}

func (i inboxCustomerDo) Find() ([]*model.InboxCustomer, error) {
	result, err := i.DO.Find()
	return result.([]*model.InboxCustomer), err
}

func (i inboxCustomerDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.InboxCustomer, err error) {
	buf := make([]*model.InboxCustomer, 0, batchSize)
	err = i.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (i inboxCustomerDo) FindInBatches(result *[]*model.InboxCustomer, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return i.DO.FindInBatches(result, batchSize, fc)
}

func (i inboxCustomerDo) Attrs(attrs ...field.AssignExpr) IInboxCustomerDo {
	return i.withDO(i.DO.Attrs(attrs...))
}

func (i inboxCustomerDo) Assign(attrs ...field.AssignExpr) IInboxCustomerDo {
	return i.withDO(i.DO.Assign(attrs...))
}

func (i inboxCustomerDo) Joins(fields ...field.RelationField) IInboxCustomerDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Joins(_f))
	}
	return &i
}

func (i inboxCustomerDo) Preload(fields ...field.RelationField) IInboxCustomerDo {
	for _, _f := range fields {
		i = *i.withDO(i.DO.Preload(_f))
	}
	return &i
}

func (i inboxCustomerDo) FirstOrInit() (*model.InboxCustomer, error) {
	if result, err := i.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.InboxCustomer), nil
	}
}

func (i inboxCustomerDo) FirstOrCreate() (*model.InboxCustomer, error) {
	if result, err := i.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.InboxCustomer), nil
	}
}

func (i inboxCustomerDo) FindByPage(offset int, limit int) (result []*model.InboxCustomer, count int64, err error) {
	result, err = i.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = i.Offset(-1).Limit(-1).Count()
	return
}

func (i inboxCustomerDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = i.Count()
	if err != nil {
		return
	}

	err = i.Offset(offset).Limit(limit).Scan(result)
	return
}

func (i inboxCustomerDo) Scan(result interface{}) (err error) {
	return i.DO.Scan(result)
}

func (i inboxCustomerDo) Delete(models ...*model.InboxCustomer) (result gen.ResultInfo, err error) {
	return i.DO.Delete(models)
}

func (i *inboxCustomerDo) withDO(do gen.Dao) *inboxCustomerDo {
	i.DO = *do.(*gen.DO)
	return i
}
