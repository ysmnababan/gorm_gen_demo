// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm_demo/staging/model"
)

func newOutletMenu(db *gorm.DB, opts ...gen.DOOption) outletMenu {
	_outletMenu := outletMenu{}

	_outletMenu.outletMenuDo.UseDB(db, opts...)
	_outletMenu.outletMenuDo.UseModel(&model.OutletMenu{})

	tableName := _outletMenu.outletMenuDo.TableName()
	_outletMenu.ALL = field.NewAsterisk(tableName)
	_outletMenu.CreatedAt = field.NewInt64(tableName, "created_at")
	_outletMenu.CreatedBy = field.NewString(tableName, "created_by")
	_outletMenu.ModifiedAt = field.NewInt64(tableName, "modified_at")
	_outletMenu.ModifiedBy = field.NewString(tableName, "modified_by")
	_outletMenu.DeletedAt = field.NewInt64(tableName, "deleted_at")
	_outletMenu.DeletedBy = field.NewString(tableName, "deleted_by")
	_outletMenu.OutletMenuID = field.NewString(tableName, "outlet_menu_id")
	_outletMenu.OutletID = field.NewString(tableName, "outlet_id")
	_outletMenu.MenuName = field.NewString(tableName, "menu_name")
	_outletMenu.Price = field.NewFloat64(tableName, "price")
	_outletMenu.Description = field.NewString(tableName, "description")
	_outletMenu.URLImage = field.NewString(tableName, "url_image")
	_outletMenu.IsActive = field.NewBool(tableName, "is_active")
	_outletMenu.TotalFavorite = field.NewInt32(tableName, "total_favorite")
	_outletMenu.Tag = field.NewString(tableName, "tag")

	_outletMenu.fillFieldMap()

	return _outletMenu
}

type outletMenu struct {
	outletMenuDo

	ALL           field.Asterisk
	CreatedAt     field.Int64
	CreatedBy     field.String
	ModifiedAt    field.Int64
	ModifiedBy    field.String
	DeletedAt     field.Int64
	DeletedBy     field.String
	OutletMenuID  field.String
	OutletID      field.String
	MenuName      field.String
	Price         field.Float64
	Description   field.String
	URLImage      field.String
	IsActive      field.Bool
	TotalFavorite field.Int32
	Tag           field.String

	fieldMap map[string]field.Expr
}

func (o outletMenu) Table(newTableName string) *outletMenu {
	o.outletMenuDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o outletMenu) As(alias string) *outletMenu {
	o.outletMenuDo.DO = *(o.outletMenuDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *outletMenu) updateTableName(table string) *outletMenu {
	o.ALL = field.NewAsterisk(table)
	o.CreatedAt = field.NewInt64(table, "created_at")
	o.CreatedBy = field.NewString(table, "created_by")
	o.ModifiedAt = field.NewInt64(table, "modified_at")
	o.ModifiedBy = field.NewString(table, "modified_by")
	o.DeletedAt = field.NewInt64(table, "deleted_at")
	o.DeletedBy = field.NewString(table, "deleted_by")
	o.OutletMenuID = field.NewString(table, "outlet_menu_id")
	o.OutletID = field.NewString(table, "outlet_id")
	o.MenuName = field.NewString(table, "menu_name")
	o.Price = field.NewFloat64(table, "price")
	o.Description = field.NewString(table, "description")
	o.URLImage = field.NewString(table, "url_image")
	o.IsActive = field.NewBool(table, "is_active")
	o.TotalFavorite = field.NewInt32(table, "total_favorite")
	o.Tag = field.NewString(table, "tag")

	o.fillFieldMap()

	return o
}

func (o *outletMenu) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *outletMenu) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 15)
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["created_by"] = o.CreatedBy
	o.fieldMap["modified_at"] = o.ModifiedAt
	o.fieldMap["modified_by"] = o.ModifiedBy
	o.fieldMap["deleted_at"] = o.DeletedAt
	o.fieldMap["deleted_by"] = o.DeletedBy
	o.fieldMap["outlet_menu_id"] = o.OutletMenuID
	o.fieldMap["outlet_id"] = o.OutletID
	o.fieldMap["menu_name"] = o.MenuName
	o.fieldMap["price"] = o.Price
	o.fieldMap["description"] = o.Description
	o.fieldMap["url_image"] = o.URLImage
	o.fieldMap["is_active"] = o.IsActive
	o.fieldMap["total_favorite"] = o.TotalFavorite
	o.fieldMap["tag"] = o.Tag
}

func (o outletMenu) clone(db *gorm.DB) outletMenu {
	o.outletMenuDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o outletMenu) replaceDB(db *gorm.DB) outletMenu {
	o.outletMenuDo.ReplaceDB(db)
	return o
}

type outletMenuDo struct{ gen.DO }

type IOutletMenuDo interface {
	gen.SubQuery
	Debug() IOutletMenuDo
	WithContext(ctx context.Context) IOutletMenuDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOutletMenuDo
	WriteDB() IOutletMenuDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOutletMenuDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOutletMenuDo
	Not(conds ...gen.Condition) IOutletMenuDo
	Or(conds ...gen.Condition) IOutletMenuDo
	Select(conds ...field.Expr) IOutletMenuDo
	Where(conds ...gen.Condition) IOutletMenuDo
	Order(conds ...field.Expr) IOutletMenuDo
	Distinct(cols ...field.Expr) IOutletMenuDo
	Omit(cols ...field.Expr) IOutletMenuDo
	Join(table schema.Tabler, on ...field.Expr) IOutletMenuDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOutletMenuDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOutletMenuDo
	Group(cols ...field.Expr) IOutletMenuDo
	Having(conds ...gen.Condition) IOutletMenuDo
	Limit(limit int) IOutletMenuDo
	Offset(offset int) IOutletMenuDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOutletMenuDo
	Unscoped() IOutletMenuDo
	Create(values ...*model.OutletMenu) error
	CreateInBatches(values []*model.OutletMenu, batchSize int) error
	Save(values ...*model.OutletMenu) error
	First() (*model.OutletMenu, error)
	Take() (*model.OutletMenu, error)
	Last() (*model.OutletMenu, error)
	Find() ([]*model.OutletMenu, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OutletMenu, err error)
	FindInBatches(result *[]*model.OutletMenu, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OutletMenu) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOutletMenuDo
	Assign(attrs ...field.AssignExpr) IOutletMenuDo
	Joins(fields ...field.RelationField) IOutletMenuDo
	Preload(fields ...field.RelationField) IOutletMenuDo
	FirstOrInit() (*model.OutletMenu, error)
	FirstOrCreate() (*model.OutletMenu, error)
	FindByPage(offset int, limit int) (result []*model.OutletMenu, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOutletMenuDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o outletMenuDo) Debug() IOutletMenuDo {
	return o.withDO(o.DO.Debug())
}

func (o outletMenuDo) WithContext(ctx context.Context) IOutletMenuDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o outletMenuDo) ReadDB() IOutletMenuDo {
	return o.Clauses(dbresolver.Read)
}

func (o outletMenuDo) WriteDB() IOutletMenuDo {
	return o.Clauses(dbresolver.Write)
}

func (o outletMenuDo) Session(config *gorm.Session) IOutletMenuDo {
	return o.withDO(o.DO.Session(config))
}

func (o outletMenuDo) Clauses(conds ...clause.Expression) IOutletMenuDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o outletMenuDo) Returning(value interface{}, columns ...string) IOutletMenuDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o outletMenuDo) Not(conds ...gen.Condition) IOutletMenuDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o outletMenuDo) Or(conds ...gen.Condition) IOutletMenuDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o outletMenuDo) Select(conds ...field.Expr) IOutletMenuDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o outletMenuDo) Where(conds ...gen.Condition) IOutletMenuDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o outletMenuDo) Order(conds ...field.Expr) IOutletMenuDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o outletMenuDo) Distinct(cols ...field.Expr) IOutletMenuDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o outletMenuDo) Omit(cols ...field.Expr) IOutletMenuDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o outletMenuDo) Join(table schema.Tabler, on ...field.Expr) IOutletMenuDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o outletMenuDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOutletMenuDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o outletMenuDo) RightJoin(table schema.Tabler, on ...field.Expr) IOutletMenuDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o outletMenuDo) Group(cols ...field.Expr) IOutletMenuDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o outletMenuDo) Having(conds ...gen.Condition) IOutletMenuDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o outletMenuDo) Limit(limit int) IOutletMenuDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o outletMenuDo) Offset(offset int) IOutletMenuDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o outletMenuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOutletMenuDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o outletMenuDo) Unscoped() IOutletMenuDo {
	return o.withDO(o.DO.Unscoped())
}

func (o outletMenuDo) Create(values ...*model.OutletMenu) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o outletMenuDo) CreateInBatches(values []*model.OutletMenu, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o outletMenuDo) Save(values ...*model.OutletMenu) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o outletMenuDo) First() (*model.OutletMenu, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OutletMenu), nil
	}
}

func (o outletMenuDo) Take() (*model.OutletMenu, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OutletMenu), nil
	}
}

func (o outletMenuDo) Last() (*model.OutletMenu, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OutletMenu), nil
	}
}

func (o outletMenuDo) Find() ([]*model.OutletMenu, error) {
	result, err := o.DO.Find()
	return result.([]*model.OutletMenu), err
}

func (o outletMenuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OutletMenu, err error) {
	buf := make([]*model.OutletMenu, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o outletMenuDo) FindInBatches(result *[]*model.OutletMenu, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o outletMenuDo) Attrs(attrs ...field.AssignExpr) IOutletMenuDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o outletMenuDo) Assign(attrs ...field.AssignExpr) IOutletMenuDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o outletMenuDo) Joins(fields ...field.RelationField) IOutletMenuDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o outletMenuDo) Preload(fields ...field.RelationField) IOutletMenuDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o outletMenuDo) FirstOrInit() (*model.OutletMenu, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OutletMenu), nil
	}
}

func (o outletMenuDo) FirstOrCreate() (*model.OutletMenu, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OutletMenu), nil
	}
}

func (o outletMenuDo) FindByPage(offset int, limit int) (result []*model.OutletMenu, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o outletMenuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o outletMenuDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o outletMenuDo) Delete(models ...*model.OutletMenu) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *outletMenuDo) withDO(do gen.Dao) *outletMenuDo {
	o.DO = *do.(*gen.DO)
	return o
}
