// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm_demo/staging/model"
)

func newMenuFavorite(db *gorm.DB, opts ...gen.DOOption) menuFavorite {
	_menuFavorite := menuFavorite{}

	_menuFavorite.menuFavoriteDo.UseDB(db, opts...)
	_menuFavorite.menuFavoriteDo.UseModel(&model.MenuFavorite{})

	tableName := _menuFavorite.menuFavoriteDo.TableName()
	_menuFavorite.ALL = field.NewAsterisk(tableName)
	_menuFavorite.CreatedAt = field.NewInt64(tableName, "created_at")
	_menuFavorite.CreatedBy = field.NewString(tableName, "created_by")
	_menuFavorite.ModifiedAt = field.NewInt64(tableName, "modified_at")
	_menuFavorite.ModifiedBy = field.NewString(tableName, "modified_by")
	_menuFavorite.DeletedAt = field.NewInt64(tableName, "deleted_at")
	_menuFavorite.DeletedBy = field.NewString(tableName, "deleted_by")
	_menuFavorite.MenuFavoriteID = field.NewString(tableName, "menu_favorite_id")
	_menuFavorite.OutletMenuID = field.NewString(tableName, "outlet_menu_id")
	_menuFavorite.CustomerID = field.NewString(tableName, "customer_id")

	_menuFavorite.fillFieldMap()

	return _menuFavorite
}

type menuFavorite struct {
	menuFavoriteDo

	ALL            field.Asterisk
	CreatedAt      field.Int64
	CreatedBy      field.String
	ModifiedAt     field.Int64
	ModifiedBy     field.String
	DeletedAt      field.Int64
	DeletedBy      field.String
	MenuFavoriteID field.String
	OutletMenuID   field.String
	CustomerID     field.String

	fieldMap map[string]field.Expr
}

func (m menuFavorite) Table(newTableName string) *menuFavorite {
	m.menuFavoriteDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m menuFavorite) As(alias string) *menuFavorite {
	m.menuFavoriteDo.DO = *(m.menuFavoriteDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *menuFavorite) updateTableName(table string) *menuFavorite {
	m.ALL = field.NewAsterisk(table)
	m.CreatedAt = field.NewInt64(table, "created_at")
	m.CreatedBy = field.NewString(table, "created_by")
	m.ModifiedAt = field.NewInt64(table, "modified_at")
	m.ModifiedBy = field.NewString(table, "modified_by")
	m.DeletedAt = field.NewInt64(table, "deleted_at")
	m.DeletedBy = field.NewString(table, "deleted_by")
	m.MenuFavoriteID = field.NewString(table, "menu_favorite_id")
	m.OutletMenuID = field.NewString(table, "outlet_menu_id")
	m.CustomerID = field.NewString(table, "customer_id")

	m.fillFieldMap()

	return m
}

func (m *menuFavorite) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *menuFavorite) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 9)
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["created_by"] = m.CreatedBy
	m.fieldMap["modified_at"] = m.ModifiedAt
	m.fieldMap["modified_by"] = m.ModifiedBy
	m.fieldMap["deleted_at"] = m.DeletedAt
	m.fieldMap["deleted_by"] = m.DeletedBy
	m.fieldMap["menu_favorite_id"] = m.MenuFavoriteID
	m.fieldMap["outlet_menu_id"] = m.OutletMenuID
	m.fieldMap["customer_id"] = m.CustomerID
}

func (m menuFavorite) clone(db *gorm.DB) menuFavorite {
	m.menuFavoriteDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m menuFavorite) replaceDB(db *gorm.DB) menuFavorite {
	m.menuFavoriteDo.ReplaceDB(db)
	return m
}

type menuFavoriteDo struct{ gen.DO }

type IMenuFavoriteDo interface {
	gen.SubQuery
	Debug() IMenuFavoriteDo
	WithContext(ctx context.Context) IMenuFavoriteDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMenuFavoriteDo
	WriteDB() IMenuFavoriteDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMenuFavoriteDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMenuFavoriteDo
	Not(conds ...gen.Condition) IMenuFavoriteDo
	Or(conds ...gen.Condition) IMenuFavoriteDo
	Select(conds ...field.Expr) IMenuFavoriteDo
	Where(conds ...gen.Condition) IMenuFavoriteDo
	Order(conds ...field.Expr) IMenuFavoriteDo
	Distinct(cols ...field.Expr) IMenuFavoriteDo
	Omit(cols ...field.Expr) IMenuFavoriteDo
	Join(table schema.Tabler, on ...field.Expr) IMenuFavoriteDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMenuFavoriteDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMenuFavoriteDo
	Group(cols ...field.Expr) IMenuFavoriteDo
	Having(conds ...gen.Condition) IMenuFavoriteDo
	Limit(limit int) IMenuFavoriteDo
	Offset(offset int) IMenuFavoriteDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMenuFavoriteDo
	Unscoped() IMenuFavoriteDo
	Create(values ...*model.MenuFavorite) error
	CreateInBatches(values []*model.MenuFavorite, batchSize int) error
	Save(values ...*model.MenuFavorite) error
	First() (*model.MenuFavorite, error)
	Take() (*model.MenuFavorite, error)
	Last() (*model.MenuFavorite, error)
	Find() ([]*model.MenuFavorite, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MenuFavorite, err error)
	FindInBatches(result *[]*model.MenuFavorite, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MenuFavorite) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMenuFavoriteDo
	Assign(attrs ...field.AssignExpr) IMenuFavoriteDo
	Joins(fields ...field.RelationField) IMenuFavoriteDo
	Preload(fields ...field.RelationField) IMenuFavoriteDo
	FirstOrInit() (*model.MenuFavorite, error)
	FirstOrCreate() (*model.MenuFavorite, error)
	FindByPage(offset int, limit int) (result []*model.MenuFavorite, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMenuFavoriteDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m menuFavoriteDo) Debug() IMenuFavoriteDo {
	return m.withDO(m.DO.Debug())
}

func (m menuFavoriteDo) WithContext(ctx context.Context) IMenuFavoriteDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m menuFavoriteDo) ReadDB() IMenuFavoriteDo {
	return m.Clauses(dbresolver.Read)
}

func (m menuFavoriteDo) WriteDB() IMenuFavoriteDo {
	return m.Clauses(dbresolver.Write)
}

func (m menuFavoriteDo) Session(config *gorm.Session) IMenuFavoriteDo {
	return m.withDO(m.DO.Session(config))
}

func (m menuFavoriteDo) Clauses(conds ...clause.Expression) IMenuFavoriteDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m menuFavoriteDo) Returning(value interface{}, columns ...string) IMenuFavoriteDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m menuFavoriteDo) Not(conds ...gen.Condition) IMenuFavoriteDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m menuFavoriteDo) Or(conds ...gen.Condition) IMenuFavoriteDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m menuFavoriteDo) Select(conds ...field.Expr) IMenuFavoriteDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m menuFavoriteDo) Where(conds ...gen.Condition) IMenuFavoriteDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m menuFavoriteDo) Order(conds ...field.Expr) IMenuFavoriteDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m menuFavoriteDo) Distinct(cols ...field.Expr) IMenuFavoriteDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m menuFavoriteDo) Omit(cols ...field.Expr) IMenuFavoriteDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m menuFavoriteDo) Join(table schema.Tabler, on ...field.Expr) IMenuFavoriteDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m menuFavoriteDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMenuFavoriteDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m menuFavoriteDo) RightJoin(table schema.Tabler, on ...field.Expr) IMenuFavoriteDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m menuFavoriteDo) Group(cols ...field.Expr) IMenuFavoriteDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m menuFavoriteDo) Having(conds ...gen.Condition) IMenuFavoriteDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m menuFavoriteDo) Limit(limit int) IMenuFavoriteDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m menuFavoriteDo) Offset(offset int) IMenuFavoriteDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m menuFavoriteDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMenuFavoriteDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m menuFavoriteDo) Unscoped() IMenuFavoriteDo {
	return m.withDO(m.DO.Unscoped())
}

func (m menuFavoriteDo) Create(values ...*model.MenuFavorite) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m menuFavoriteDo) CreateInBatches(values []*model.MenuFavorite, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m menuFavoriteDo) Save(values ...*model.MenuFavorite) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m menuFavoriteDo) First() (*model.MenuFavorite, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MenuFavorite), nil
	}
}

func (m menuFavoriteDo) Take() (*model.MenuFavorite, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MenuFavorite), nil
	}
}

func (m menuFavoriteDo) Last() (*model.MenuFavorite, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MenuFavorite), nil
	}
}

func (m menuFavoriteDo) Find() ([]*model.MenuFavorite, error) {
	result, err := m.DO.Find()
	return result.([]*model.MenuFavorite), err
}

func (m menuFavoriteDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MenuFavorite, err error) {
	buf := make([]*model.MenuFavorite, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m menuFavoriteDo) FindInBatches(result *[]*model.MenuFavorite, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m menuFavoriteDo) Attrs(attrs ...field.AssignExpr) IMenuFavoriteDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m menuFavoriteDo) Assign(attrs ...field.AssignExpr) IMenuFavoriteDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m menuFavoriteDo) Joins(fields ...field.RelationField) IMenuFavoriteDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m menuFavoriteDo) Preload(fields ...field.RelationField) IMenuFavoriteDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m menuFavoriteDo) FirstOrInit() (*model.MenuFavorite, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MenuFavorite), nil
	}
}

func (m menuFavoriteDo) FirstOrCreate() (*model.MenuFavorite, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MenuFavorite), nil
	}
}

func (m menuFavoriteDo) FindByPage(offset int, limit int) (result []*model.MenuFavorite, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m menuFavoriteDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m menuFavoriteDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m menuFavoriteDo) Delete(models ...*model.MenuFavorite) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *menuFavoriteDo) withDO(do gen.Dao) *menuFavoriteDo {
	m.DO = *do.(*gen.DO)
	return m
}
