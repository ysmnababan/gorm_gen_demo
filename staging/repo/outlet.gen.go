// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm_demo/staging/model"
)

func newOutlet(db *gorm.DB, opts ...gen.DOOption) outlet {
	_outlet := outlet{}

	_outlet.outletDo.UseDB(db, opts...)
	_outlet.outletDo.UseModel(&model.Outlet{})

	tableName := _outlet.outletDo.TableName()
	_outlet.ALL = field.NewAsterisk(tableName)
	_outlet.CreatedAt = field.NewInt64(tableName, "created_at")
	_outlet.CreatedBy = field.NewString(tableName, "created_by")
	_outlet.ModifiedAt = field.NewInt64(tableName, "modified_at")
	_outlet.ModifiedBy = field.NewString(tableName, "modified_by")
	_outlet.DeletedAt = field.NewInt64(tableName, "deleted_at")
	_outlet.DeletedBy = field.NewString(tableName, "deleted_by")
	_outlet.OutletID = field.NewString(tableName, "outlet_id")
	_outlet.MerchantID = field.NewString(tableName, "merchant_id")
	_outlet.OutletName = field.NewString(tableName, "outlet_name")
	_outlet.Phone = field.NewString(tableName, "phone")
	_outlet.LocationID = field.NewString(tableName, "location_id")
	_outlet.URLMain = field.NewString(tableName, "url_main")
	_outlet.URLCover = field.NewString(tableName, "url_cover")
	_outlet.IsActive = field.NewBool(tableName, "is_active")
	_outlet.Rating = field.NewFloat64(tableName, "rating")
	_outlet.TotalRating = field.NewInt32(tableName, "total_rating")
	_outlet.IsOpen = field.NewBool(tableName, "is_open")
	_outlet.Tag = field.NewString(tableName, "tag")
	_outlet.TotalRatingUser = field.NewInt32(tableName, "total_rating_user")
	_outlet.IsAlert = field.NewBool(tableName, "is_alert")

	_outlet.fillFieldMap()

	return _outlet
}

type outlet struct {
	outletDo

	ALL             field.Asterisk
	CreatedAt       field.Int64
	CreatedBy       field.String
	ModifiedAt      field.Int64
	ModifiedBy      field.String
	DeletedAt       field.Int64
	DeletedBy       field.String
	OutletID        field.String
	MerchantID      field.String
	OutletName      field.String
	Phone           field.String
	LocationID      field.String
	URLMain         field.String
	URLCover        field.String
	IsActive        field.Bool
	Rating          field.Float64
	TotalRating     field.Int32
	IsOpen          field.Bool
	Tag             field.String
	TotalRatingUser field.Int32
	IsAlert         field.Bool

	fieldMap map[string]field.Expr
}

func (o outlet) Table(newTableName string) *outlet {
	o.outletDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o outlet) As(alias string) *outlet {
	o.outletDo.DO = *(o.outletDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *outlet) updateTableName(table string) *outlet {
	o.ALL = field.NewAsterisk(table)
	o.CreatedAt = field.NewInt64(table, "created_at")
	o.CreatedBy = field.NewString(table, "created_by")
	o.ModifiedAt = field.NewInt64(table, "modified_at")
	o.ModifiedBy = field.NewString(table, "modified_by")
	o.DeletedAt = field.NewInt64(table, "deleted_at")
	o.DeletedBy = field.NewString(table, "deleted_by")
	o.OutletID = field.NewString(table, "outlet_id")
	o.MerchantID = field.NewString(table, "merchant_id")
	o.OutletName = field.NewString(table, "outlet_name")
	o.Phone = field.NewString(table, "phone")
	o.LocationID = field.NewString(table, "location_id")
	o.URLMain = field.NewString(table, "url_main")
	o.URLCover = field.NewString(table, "url_cover")
	o.IsActive = field.NewBool(table, "is_active")
	o.Rating = field.NewFloat64(table, "rating")
	o.TotalRating = field.NewInt32(table, "total_rating")
	o.IsOpen = field.NewBool(table, "is_open")
	o.Tag = field.NewString(table, "tag")
	o.TotalRatingUser = field.NewInt32(table, "total_rating_user")
	o.IsAlert = field.NewBool(table, "is_alert")

	o.fillFieldMap()

	return o
}

func (o *outlet) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *outlet) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 20)
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["created_by"] = o.CreatedBy
	o.fieldMap["modified_at"] = o.ModifiedAt
	o.fieldMap["modified_by"] = o.ModifiedBy
	o.fieldMap["deleted_at"] = o.DeletedAt
	o.fieldMap["deleted_by"] = o.DeletedBy
	o.fieldMap["outlet_id"] = o.OutletID
	o.fieldMap["merchant_id"] = o.MerchantID
	o.fieldMap["outlet_name"] = o.OutletName
	o.fieldMap["phone"] = o.Phone
	o.fieldMap["location_id"] = o.LocationID
	o.fieldMap["url_main"] = o.URLMain
	o.fieldMap["url_cover"] = o.URLCover
	o.fieldMap["is_active"] = o.IsActive
	o.fieldMap["rating"] = o.Rating
	o.fieldMap["total_rating"] = o.TotalRating
	o.fieldMap["is_open"] = o.IsOpen
	o.fieldMap["tag"] = o.Tag
	o.fieldMap["total_rating_user"] = o.TotalRatingUser
	o.fieldMap["is_alert"] = o.IsAlert
}

func (o outlet) clone(db *gorm.DB) outlet {
	o.outletDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o outlet) replaceDB(db *gorm.DB) outlet {
	o.outletDo.ReplaceDB(db)
	return o
}

type outletDo struct{ gen.DO }

type IOutletDo interface {
	gen.SubQuery
	Debug() IOutletDo
	WithContext(ctx context.Context) IOutletDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOutletDo
	WriteDB() IOutletDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOutletDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOutletDo
	Not(conds ...gen.Condition) IOutletDo
	Or(conds ...gen.Condition) IOutletDo
	Select(conds ...field.Expr) IOutletDo
	Where(conds ...gen.Condition) IOutletDo
	Order(conds ...field.Expr) IOutletDo
	Distinct(cols ...field.Expr) IOutletDo
	Omit(cols ...field.Expr) IOutletDo
	Join(table schema.Tabler, on ...field.Expr) IOutletDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOutletDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOutletDo
	Group(cols ...field.Expr) IOutletDo
	Having(conds ...gen.Condition) IOutletDo
	Limit(limit int) IOutletDo
	Offset(offset int) IOutletDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOutletDo
	Unscoped() IOutletDo
	Create(values ...*model.Outlet) error
	CreateInBatches(values []*model.Outlet, batchSize int) error
	Save(values ...*model.Outlet) error
	First() (*model.Outlet, error)
	Take() (*model.Outlet, error)
	Last() (*model.Outlet, error)
	Find() ([]*model.Outlet, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Outlet, err error)
	FindInBatches(result *[]*model.Outlet, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Outlet) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOutletDo
	Assign(attrs ...field.AssignExpr) IOutletDo
	Joins(fields ...field.RelationField) IOutletDo
	Preload(fields ...field.RelationField) IOutletDo
	FirstOrInit() (*model.Outlet, error)
	FirstOrCreate() (*model.Outlet, error)
	FindByPage(offset int, limit int) (result []*model.Outlet, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOutletDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o outletDo) Debug() IOutletDo {
	return o.withDO(o.DO.Debug())
}

func (o outletDo) WithContext(ctx context.Context) IOutletDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o outletDo) ReadDB() IOutletDo {
	return o.Clauses(dbresolver.Read)
}

func (o outletDo) WriteDB() IOutletDo {
	return o.Clauses(dbresolver.Write)
}

func (o outletDo) Session(config *gorm.Session) IOutletDo {
	return o.withDO(o.DO.Session(config))
}

func (o outletDo) Clauses(conds ...clause.Expression) IOutletDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o outletDo) Returning(value interface{}, columns ...string) IOutletDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o outletDo) Not(conds ...gen.Condition) IOutletDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o outletDo) Or(conds ...gen.Condition) IOutletDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o outletDo) Select(conds ...field.Expr) IOutletDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o outletDo) Where(conds ...gen.Condition) IOutletDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o outletDo) Order(conds ...field.Expr) IOutletDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o outletDo) Distinct(cols ...field.Expr) IOutletDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o outletDo) Omit(cols ...field.Expr) IOutletDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o outletDo) Join(table schema.Tabler, on ...field.Expr) IOutletDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o outletDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOutletDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o outletDo) RightJoin(table schema.Tabler, on ...field.Expr) IOutletDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o outletDo) Group(cols ...field.Expr) IOutletDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o outletDo) Having(conds ...gen.Condition) IOutletDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o outletDo) Limit(limit int) IOutletDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o outletDo) Offset(offset int) IOutletDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o outletDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOutletDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o outletDo) Unscoped() IOutletDo {
	return o.withDO(o.DO.Unscoped())
}

func (o outletDo) Create(values ...*model.Outlet) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o outletDo) CreateInBatches(values []*model.Outlet, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o outletDo) Save(values ...*model.Outlet) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o outletDo) First() (*model.Outlet, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Outlet), nil
	}
}

func (o outletDo) Take() (*model.Outlet, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Outlet), nil
	}
}

func (o outletDo) Last() (*model.Outlet, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Outlet), nil
	}
}

func (o outletDo) Find() ([]*model.Outlet, error) {
	result, err := o.DO.Find()
	return result.([]*model.Outlet), err
}

func (o outletDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Outlet, err error) {
	buf := make([]*model.Outlet, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o outletDo) FindInBatches(result *[]*model.Outlet, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o outletDo) Attrs(attrs ...field.AssignExpr) IOutletDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o outletDo) Assign(attrs ...field.AssignExpr) IOutletDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o outletDo) Joins(fields ...field.RelationField) IOutletDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o outletDo) Preload(fields ...field.RelationField) IOutletDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o outletDo) FirstOrInit() (*model.Outlet, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Outlet), nil
	}
}

func (o outletDo) FirstOrCreate() (*model.Outlet, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Outlet), nil
	}
}

func (o outletDo) FindByPage(offset int, limit int) (result []*model.Outlet, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o outletDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o outletDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o outletDo) Delete(models ...*model.Outlet) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *outletDo) withDO(do gen.Dao) *outletDo {
	o.DO = *do.(*gen.DO)
	return o
}
