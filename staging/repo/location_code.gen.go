// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm_demo/staging/model"
)

func newLocationCode(db *gorm.DB, opts ...gen.DOOption) locationCode {
	_locationCode := locationCode{}

	_locationCode.locationCodeDo.UseDB(db, opts...)
	_locationCode.locationCodeDo.UseModel(&model.LocationCode{})

	tableName := _locationCode.locationCodeDo.TableName()
	_locationCode.ALL = field.NewAsterisk(tableName)
	_locationCode.LocationID = field.NewString(tableName, "location_id")
	_locationCode.Timestamp = field.NewTime(tableName, "timestamp")
	_locationCode.SeqCode = field.NewInt32(tableName, "seq_code")

	_locationCode.fillFieldMap()

	return _locationCode
}

type locationCode struct {
	locationCodeDo

	ALL        field.Asterisk
	LocationID field.String
	Timestamp  field.Time
	SeqCode    field.Int32

	fieldMap map[string]field.Expr
}

func (l locationCode) Table(newTableName string) *locationCode {
	l.locationCodeDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l locationCode) As(alias string) *locationCode {
	l.locationCodeDo.DO = *(l.locationCodeDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *locationCode) updateTableName(table string) *locationCode {
	l.ALL = field.NewAsterisk(table)
	l.LocationID = field.NewString(table, "location_id")
	l.Timestamp = field.NewTime(table, "timestamp")
	l.SeqCode = field.NewInt32(table, "seq_code")

	l.fillFieldMap()

	return l
}

func (l *locationCode) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *locationCode) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 3)
	l.fieldMap["location_id"] = l.LocationID
	l.fieldMap["timestamp"] = l.Timestamp
	l.fieldMap["seq_code"] = l.SeqCode
}

func (l locationCode) clone(db *gorm.DB) locationCode {
	l.locationCodeDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l locationCode) replaceDB(db *gorm.DB) locationCode {
	l.locationCodeDo.ReplaceDB(db)
	return l
}

type locationCodeDo struct{ gen.DO }

type ILocationCodeDo interface {
	gen.SubQuery
	Debug() ILocationCodeDo
	WithContext(ctx context.Context) ILocationCodeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILocationCodeDo
	WriteDB() ILocationCodeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILocationCodeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILocationCodeDo
	Not(conds ...gen.Condition) ILocationCodeDo
	Or(conds ...gen.Condition) ILocationCodeDo
	Select(conds ...field.Expr) ILocationCodeDo
	Where(conds ...gen.Condition) ILocationCodeDo
	Order(conds ...field.Expr) ILocationCodeDo
	Distinct(cols ...field.Expr) ILocationCodeDo
	Omit(cols ...field.Expr) ILocationCodeDo
	Join(table schema.Tabler, on ...field.Expr) ILocationCodeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILocationCodeDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILocationCodeDo
	Group(cols ...field.Expr) ILocationCodeDo
	Having(conds ...gen.Condition) ILocationCodeDo
	Limit(limit int) ILocationCodeDo
	Offset(offset int) ILocationCodeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILocationCodeDo
	Unscoped() ILocationCodeDo
	Create(values ...*model.LocationCode) error
	CreateInBatches(values []*model.LocationCode, batchSize int) error
	Save(values ...*model.LocationCode) error
	First() (*model.LocationCode, error)
	Take() (*model.LocationCode, error)
	Last() (*model.LocationCode, error)
	Find() ([]*model.LocationCode, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LocationCode, err error)
	FindInBatches(result *[]*model.LocationCode, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LocationCode) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILocationCodeDo
	Assign(attrs ...field.AssignExpr) ILocationCodeDo
	Joins(fields ...field.RelationField) ILocationCodeDo
	Preload(fields ...field.RelationField) ILocationCodeDo
	FirstOrInit() (*model.LocationCode, error)
	FirstOrCreate() (*model.LocationCode, error)
	FindByPage(offset int, limit int) (result []*model.LocationCode, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILocationCodeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l locationCodeDo) Debug() ILocationCodeDo {
	return l.withDO(l.DO.Debug())
}

func (l locationCodeDo) WithContext(ctx context.Context) ILocationCodeDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l locationCodeDo) ReadDB() ILocationCodeDo {
	return l.Clauses(dbresolver.Read)
}

func (l locationCodeDo) WriteDB() ILocationCodeDo {
	return l.Clauses(dbresolver.Write)
}

func (l locationCodeDo) Session(config *gorm.Session) ILocationCodeDo {
	return l.withDO(l.DO.Session(config))
}

func (l locationCodeDo) Clauses(conds ...clause.Expression) ILocationCodeDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l locationCodeDo) Returning(value interface{}, columns ...string) ILocationCodeDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l locationCodeDo) Not(conds ...gen.Condition) ILocationCodeDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l locationCodeDo) Or(conds ...gen.Condition) ILocationCodeDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l locationCodeDo) Select(conds ...field.Expr) ILocationCodeDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l locationCodeDo) Where(conds ...gen.Condition) ILocationCodeDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l locationCodeDo) Order(conds ...field.Expr) ILocationCodeDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l locationCodeDo) Distinct(cols ...field.Expr) ILocationCodeDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l locationCodeDo) Omit(cols ...field.Expr) ILocationCodeDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l locationCodeDo) Join(table schema.Tabler, on ...field.Expr) ILocationCodeDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l locationCodeDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILocationCodeDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l locationCodeDo) RightJoin(table schema.Tabler, on ...field.Expr) ILocationCodeDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l locationCodeDo) Group(cols ...field.Expr) ILocationCodeDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l locationCodeDo) Having(conds ...gen.Condition) ILocationCodeDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l locationCodeDo) Limit(limit int) ILocationCodeDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l locationCodeDo) Offset(offset int) ILocationCodeDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l locationCodeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILocationCodeDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l locationCodeDo) Unscoped() ILocationCodeDo {
	return l.withDO(l.DO.Unscoped())
}

func (l locationCodeDo) Create(values ...*model.LocationCode) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l locationCodeDo) CreateInBatches(values []*model.LocationCode, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l locationCodeDo) Save(values ...*model.LocationCode) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l locationCodeDo) First() (*model.LocationCode, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LocationCode), nil
	}
}

func (l locationCodeDo) Take() (*model.LocationCode, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LocationCode), nil
	}
}

func (l locationCodeDo) Last() (*model.LocationCode, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LocationCode), nil
	}
}

func (l locationCodeDo) Find() ([]*model.LocationCode, error) {
	result, err := l.DO.Find()
	return result.([]*model.LocationCode), err
}

func (l locationCodeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LocationCode, err error) {
	buf := make([]*model.LocationCode, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l locationCodeDo) FindInBatches(result *[]*model.LocationCode, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l locationCodeDo) Attrs(attrs ...field.AssignExpr) ILocationCodeDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l locationCodeDo) Assign(attrs ...field.AssignExpr) ILocationCodeDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l locationCodeDo) Joins(fields ...field.RelationField) ILocationCodeDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l locationCodeDo) Preload(fields ...field.RelationField) ILocationCodeDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l locationCodeDo) FirstOrInit() (*model.LocationCode, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LocationCode), nil
	}
}

func (l locationCodeDo) FirstOrCreate() (*model.LocationCode, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LocationCode), nil
	}
}

func (l locationCodeDo) FindByPage(offset int, limit int) (result []*model.LocationCode, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l locationCodeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l locationCodeDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l locationCodeDo) Delete(models ...*model.LocationCode) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *locationCodeDo) withDO(do gen.Dao) *locationCodeDo {
	l.DO = *do.(*gen.DO)
	return l
}
