// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm_demo/staging/model"
)

func newOutletSection(db *gorm.DB, opts ...gen.DOOption) outletSection {
	_outletSection := outletSection{}

	_outletSection.outletSectionDo.UseDB(db, opts...)
	_outletSection.outletSectionDo.UseModel(&model.OutletSection{})

	tableName := _outletSection.outletSectionDo.TableName()
	_outletSection.ALL = field.NewAsterisk(tableName)
	_outletSection.CreatedAt = field.NewInt64(tableName, "created_at")
	_outletSection.CreatedBy = field.NewString(tableName, "created_by")
	_outletSection.ModifiedAt = field.NewInt64(tableName, "modified_at")
	_outletSection.ModifiedBy = field.NewString(tableName, "modified_by")
	_outletSection.DeletedAt = field.NewInt64(tableName, "deleted_at")
	_outletSection.DeletedBy = field.NewString(tableName, "deleted_by")
	_outletSection.OutletSectionID = field.NewString(tableName, "outlet_section_id")
	_outletSection.OutletID = field.NewString(tableName, "outlet_id")
	_outletSection.SectionName = field.NewString(tableName, "section_name")
	_outletSection.IsActive = field.NewBool(tableName, "is_active")

	_outletSection.fillFieldMap()

	return _outletSection
}

type outletSection struct {
	outletSectionDo

	ALL             field.Asterisk
	CreatedAt       field.Int64
	CreatedBy       field.String
	ModifiedAt      field.Int64
	ModifiedBy      field.String
	DeletedAt       field.Int64
	DeletedBy       field.String
	OutletSectionID field.String
	OutletID        field.String
	SectionName     field.String
	IsActive        field.Bool

	fieldMap map[string]field.Expr
}

func (o outletSection) Table(newTableName string) *outletSection {
	o.outletSectionDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o outletSection) As(alias string) *outletSection {
	o.outletSectionDo.DO = *(o.outletSectionDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *outletSection) updateTableName(table string) *outletSection {
	o.ALL = field.NewAsterisk(table)
	o.CreatedAt = field.NewInt64(table, "created_at")
	o.CreatedBy = field.NewString(table, "created_by")
	o.ModifiedAt = field.NewInt64(table, "modified_at")
	o.ModifiedBy = field.NewString(table, "modified_by")
	o.DeletedAt = field.NewInt64(table, "deleted_at")
	o.DeletedBy = field.NewString(table, "deleted_by")
	o.OutletSectionID = field.NewString(table, "outlet_section_id")
	o.OutletID = field.NewString(table, "outlet_id")
	o.SectionName = field.NewString(table, "section_name")
	o.IsActive = field.NewBool(table, "is_active")

	o.fillFieldMap()

	return o
}

func (o *outletSection) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *outletSection) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 10)
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["created_by"] = o.CreatedBy
	o.fieldMap["modified_at"] = o.ModifiedAt
	o.fieldMap["modified_by"] = o.ModifiedBy
	o.fieldMap["deleted_at"] = o.DeletedAt
	o.fieldMap["deleted_by"] = o.DeletedBy
	o.fieldMap["outlet_section_id"] = o.OutletSectionID
	o.fieldMap["outlet_id"] = o.OutletID
	o.fieldMap["section_name"] = o.SectionName
	o.fieldMap["is_active"] = o.IsActive
}

func (o outletSection) clone(db *gorm.DB) outletSection {
	o.outletSectionDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o outletSection) replaceDB(db *gorm.DB) outletSection {
	o.outletSectionDo.ReplaceDB(db)
	return o
}

type outletSectionDo struct{ gen.DO }

type IOutletSectionDo interface {
	gen.SubQuery
	Debug() IOutletSectionDo
	WithContext(ctx context.Context) IOutletSectionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOutletSectionDo
	WriteDB() IOutletSectionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOutletSectionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOutletSectionDo
	Not(conds ...gen.Condition) IOutletSectionDo
	Or(conds ...gen.Condition) IOutletSectionDo
	Select(conds ...field.Expr) IOutletSectionDo
	Where(conds ...gen.Condition) IOutletSectionDo
	Order(conds ...field.Expr) IOutletSectionDo
	Distinct(cols ...field.Expr) IOutletSectionDo
	Omit(cols ...field.Expr) IOutletSectionDo
	Join(table schema.Tabler, on ...field.Expr) IOutletSectionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOutletSectionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOutletSectionDo
	Group(cols ...field.Expr) IOutletSectionDo
	Having(conds ...gen.Condition) IOutletSectionDo
	Limit(limit int) IOutletSectionDo
	Offset(offset int) IOutletSectionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOutletSectionDo
	Unscoped() IOutletSectionDo
	Create(values ...*model.OutletSection) error
	CreateInBatches(values []*model.OutletSection, batchSize int) error
	Save(values ...*model.OutletSection) error
	First() (*model.OutletSection, error)
	Take() (*model.OutletSection, error)
	Last() (*model.OutletSection, error)
	Find() ([]*model.OutletSection, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OutletSection, err error)
	FindInBatches(result *[]*model.OutletSection, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OutletSection) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOutletSectionDo
	Assign(attrs ...field.AssignExpr) IOutletSectionDo
	Joins(fields ...field.RelationField) IOutletSectionDo
	Preload(fields ...field.RelationField) IOutletSectionDo
	FirstOrInit() (*model.OutletSection, error)
	FirstOrCreate() (*model.OutletSection, error)
	FindByPage(offset int, limit int) (result []*model.OutletSection, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOutletSectionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o outletSectionDo) Debug() IOutletSectionDo {
	return o.withDO(o.DO.Debug())
}

func (o outletSectionDo) WithContext(ctx context.Context) IOutletSectionDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o outletSectionDo) ReadDB() IOutletSectionDo {
	return o.Clauses(dbresolver.Read)
}

func (o outletSectionDo) WriteDB() IOutletSectionDo {
	return o.Clauses(dbresolver.Write)
}

func (o outletSectionDo) Session(config *gorm.Session) IOutletSectionDo {
	return o.withDO(o.DO.Session(config))
}

func (o outletSectionDo) Clauses(conds ...clause.Expression) IOutletSectionDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o outletSectionDo) Returning(value interface{}, columns ...string) IOutletSectionDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o outletSectionDo) Not(conds ...gen.Condition) IOutletSectionDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o outletSectionDo) Or(conds ...gen.Condition) IOutletSectionDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o outletSectionDo) Select(conds ...field.Expr) IOutletSectionDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o outletSectionDo) Where(conds ...gen.Condition) IOutletSectionDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o outletSectionDo) Order(conds ...field.Expr) IOutletSectionDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o outletSectionDo) Distinct(cols ...field.Expr) IOutletSectionDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o outletSectionDo) Omit(cols ...field.Expr) IOutletSectionDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o outletSectionDo) Join(table schema.Tabler, on ...field.Expr) IOutletSectionDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o outletSectionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOutletSectionDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o outletSectionDo) RightJoin(table schema.Tabler, on ...field.Expr) IOutletSectionDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o outletSectionDo) Group(cols ...field.Expr) IOutletSectionDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o outletSectionDo) Having(conds ...gen.Condition) IOutletSectionDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o outletSectionDo) Limit(limit int) IOutletSectionDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o outletSectionDo) Offset(offset int) IOutletSectionDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o outletSectionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOutletSectionDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o outletSectionDo) Unscoped() IOutletSectionDo {
	return o.withDO(o.DO.Unscoped())
}

func (o outletSectionDo) Create(values ...*model.OutletSection) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o outletSectionDo) CreateInBatches(values []*model.OutletSection, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o outletSectionDo) Save(values ...*model.OutletSection) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o outletSectionDo) First() (*model.OutletSection, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OutletSection), nil
	}
}

func (o outletSectionDo) Take() (*model.OutletSection, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OutletSection), nil
	}
}

func (o outletSectionDo) Last() (*model.OutletSection, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OutletSection), nil
	}
}

func (o outletSectionDo) Find() ([]*model.OutletSection, error) {
	result, err := o.DO.Find()
	return result.([]*model.OutletSection), err
}

func (o outletSectionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OutletSection, err error) {
	buf := make([]*model.OutletSection, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o outletSectionDo) FindInBatches(result *[]*model.OutletSection, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o outletSectionDo) Attrs(attrs ...field.AssignExpr) IOutletSectionDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o outletSectionDo) Assign(attrs ...field.AssignExpr) IOutletSectionDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o outletSectionDo) Joins(fields ...field.RelationField) IOutletSectionDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o outletSectionDo) Preload(fields ...field.RelationField) IOutletSectionDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o outletSectionDo) FirstOrInit() (*model.OutletSection, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OutletSection), nil
	}
}

func (o outletSectionDo) FirstOrCreate() (*model.OutletSection, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OutletSection), nil
	}
}

func (o outletSectionDo) FindByPage(offset int, limit int) (result []*model.OutletSection, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o outletSectionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o outletSectionDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o outletSectionDo) Delete(models ...*model.OutletSection) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *outletSectionDo) withDO(do gen.Dao) *outletSectionDo {
	o.DO = *do.(*gen.DO)
	return o
}
