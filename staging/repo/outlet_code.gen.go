// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm_demo/staging/model"
)

func newOutletCode(db *gorm.DB, opts ...gen.DOOption) outletCode {
	_outletCode := outletCode{}

	_outletCode.outletCodeDo.UseDB(db, opts...)
	_outletCode.outletCodeDo.UseModel(&model.OutletCode{})

	tableName := _outletCode.outletCodeDo.TableName()
	_outletCode.ALL = field.NewAsterisk(tableName)
	_outletCode.OutletID = field.NewString(tableName, "outlet_id")
	_outletCode.Timestamp = field.NewTime(tableName, "timestamp")
	_outletCode.SeqCode = field.NewInt32(tableName, "seq_code")

	_outletCode.fillFieldMap()

	return _outletCode
}

type outletCode struct {
	outletCodeDo

	ALL       field.Asterisk
	OutletID  field.String
	Timestamp field.Time
	SeqCode   field.Int32

	fieldMap map[string]field.Expr
}

func (o outletCode) Table(newTableName string) *outletCode {
	o.outletCodeDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o outletCode) As(alias string) *outletCode {
	o.outletCodeDo.DO = *(o.outletCodeDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *outletCode) updateTableName(table string) *outletCode {
	o.ALL = field.NewAsterisk(table)
	o.OutletID = field.NewString(table, "outlet_id")
	o.Timestamp = field.NewTime(table, "timestamp")
	o.SeqCode = field.NewInt32(table, "seq_code")

	o.fillFieldMap()

	return o
}

func (o *outletCode) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *outletCode) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 3)
	o.fieldMap["outlet_id"] = o.OutletID
	o.fieldMap["timestamp"] = o.Timestamp
	o.fieldMap["seq_code"] = o.SeqCode
}

func (o outletCode) clone(db *gorm.DB) outletCode {
	o.outletCodeDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o outletCode) replaceDB(db *gorm.DB) outletCode {
	o.outletCodeDo.ReplaceDB(db)
	return o
}

type outletCodeDo struct{ gen.DO }

type IOutletCodeDo interface {
	gen.SubQuery
	Debug() IOutletCodeDo
	WithContext(ctx context.Context) IOutletCodeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOutletCodeDo
	WriteDB() IOutletCodeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOutletCodeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOutletCodeDo
	Not(conds ...gen.Condition) IOutletCodeDo
	Or(conds ...gen.Condition) IOutletCodeDo
	Select(conds ...field.Expr) IOutletCodeDo
	Where(conds ...gen.Condition) IOutletCodeDo
	Order(conds ...field.Expr) IOutletCodeDo
	Distinct(cols ...field.Expr) IOutletCodeDo
	Omit(cols ...field.Expr) IOutletCodeDo
	Join(table schema.Tabler, on ...field.Expr) IOutletCodeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOutletCodeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOutletCodeDo
	Group(cols ...field.Expr) IOutletCodeDo
	Having(conds ...gen.Condition) IOutletCodeDo
	Limit(limit int) IOutletCodeDo
	Offset(offset int) IOutletCodeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOutletCodeDo
	Unscoped() IOutletCodeDo
	Create(values ...*model.OutletCode) error
	CreateInBatches(values []*model.OutletCode, batchSize int) error
	Save(values ...*model.OutletCode) error
	First() (*model.OutletCode, error)
	Take() (*model.OutletCode, error)
	Last() (*model.OutletCode, error)
	Find() ([]*model.OutletCode, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OutletCode, err error)
	FindInBatches(result *[]*model.OutletCode, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OutletCode) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOutletCodeDo
	Assign(attrs ...field.AssignExpr) IOutletCodeDo
	Joins(fields ...field.RelationField) IOutletCodeDo
	Preload(fields ...field.RelationField) IOutletCodeDo
	FirstOrInit() (*model.OutletCode, error)
	FirstOrCreate() (*model.OutletCode, error)
	FindByPage(offset int, limit int) (result []*model.OutletCode, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOutletCodeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o outletCodeDo) Debug() IOutletCodeDo {
	return o.withDO(o.DO.Debug())
}

func (o outletCodeDo) WithContext(ctx context.Context) IOutletCodeDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o outletCodeDo) ReadDB() IOutletCodeDo {
	return o.Clauses(dbresolver.Read)
}

func (o outletCodeDo) WriteDB() IOutletCodeDo {
	return o.Clauses(dbresolver.Write)
}

func (o outletCodeDo) Session(config *gorm.Session) IOutletCodeDo {
	return o.withDO(o.DO.Session(config))
}

func (o outletCodeDo) Clauses(conds ...clause.Expression) IOutletCodeDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o outletCodeDo) Returning(value interface{}, columns ...string) IOutletCodeDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o outletCodeDo) Not(conds ...gen.Condition) IOutletCodeDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o outletCodeDo) Or(conds ...gen.Condition) IOutletCodeDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o outletCodeDo) Select(conds ...field.Expr) IOutletCodeDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o outletCodeDo) Where(conds ...gen.Condition) IOutletCodeDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o outletCodeDo) Order(conds ...field.Expr) IOutletCodeDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o outletCodeDo) Distinct(cols ...field.Expr) IOutletCodeDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o outletCodeDo) Omit(cols ...field.Expr) IOutletCodeDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o outletCodeDo) Join(table schema.Tabler, on ...field.Expr) IOutletCodeDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o outletCodeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOutletCodeDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o outletCodeDo) RightJoin(table schema.Tabler, on ...field.Expr) IOutletCodeDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o outletCodeDo) Group(cols ...field.Expr) IOutletCodeDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o outletCodeDo) Having(conds ...gen.Condition) IOutletCodeDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o outletCodeDo) Limit(limit int) IOutletCodeDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o outletCodeDo) Offset(offset int) IOutletCodeDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o outletCodeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOutletCodeDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o outletCodeDo) Unscoped() IOutletCodeDo {
	return o.withDO(o.DO.Unscoped())
}

func (o outletCodeDo) Create(values ...*model.OutletCode) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o outletCodeDo) CreateInBatches(values []*model.OutletCode, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o outletCodeDo) Save(values ...*model.OutletCode) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o outletCodeDo) First() (*model.OutletCode, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OutletCode), nil
	}
}

func (o outletCodeDo) Take() (*model.OutletCode, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OutletCode), nil
	}
}

func (o outletCodeDo) Last() (*model.OutletCode, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OutletCode), nil
	}
}

func (o outletCodeDo) Find() ([]*model.OutletCode, error) {
	result, err := o.DO.Find()
	return result.([]*model.OutletCode), err
}

func (o outletCodeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OutletCode, err error) {
	buf := make([]*model.OutletCode, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o outletCodeDo) FindInBatches(result *[]*model.OutletCode, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o outletCodeDo) Attrs(attrs ...field.AssignExpr) IOutletCodeDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o outletCodeDo) Assign(attrs ...field.AssignExpr) IOutletCodeDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o outletCodeDo) Joins(fields ...field.RelationField) IOutletCodeDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o outletCodeDo) Preload(fields ...field.RelationField) IOutletCodeDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o outletCodeDo) FirstOrInit() (*model.OutletCode, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OutletCode), nil
	}
}

func (o outletCodeDo) FirstOrCreate() (*model.OutletCode, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OutletCode), nil
	}
}

func (o outletCodeDo) FindByPage(offset int, limit int) (result []*model.OutletCode, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o outletCodeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o outletCodeDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o outletCodeDo) Delete(models ...*model.OutletCode) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *outletCodeDo) withDO(do gen.Dao) *outletCodeDo {
	o.DO = *do.(*gen.DO)
	return o
}
