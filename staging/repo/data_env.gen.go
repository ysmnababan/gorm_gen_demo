// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm_demo/staging/model"
)

func newDataEnv(db *gorm.DB, opts ...gen.DOOption) dataEnv {
	_dataEnv := dataEnv{}

	_dataEnv.dataEnvDo.UseDB(db, opts...)
	_dataEnv.dataEnvDo.UseModel(&model.DataEnv{})

	tableName := _dataEnv.dataEnvDo.TableName()
	_dataEnv.ALL = field.NewAsterisk(tableName)
	_dataEnv.EnvID = field.NewInt32(tableName, "env_id")
	_dataEnv.EnvGroup = field.NewString(tableName, "env_group")
	_dataEnv.ParentID = field.NewInt32(tableName, "parent_id")
	_dataEnv.EnvName = field.NewString(tableName, "env_name")
	_dataEnv.EnvValue = field.NewString(tableName, "env_value")
	_dataEnv.SortOrder = field.NewInt32(tableName, "sort_order")

	_dataEnv.fillFieldMap()

	return _dataEnv
}

type dataEnv struct {
	dataEnvDo

	ALL       field.Asterisk
	EnvID     field.Int32
	EnvGroup  field.String
	ParentID  field.Int32
	EnvName   field.String
	EnvValue  field.String
	SortOrder field.Int32

	fieldMap map[string]field.Expr
}

func (d dataEnv) Table(newTableName string) *dataEnv {
	d.dataEnvDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dataEnv) As(alias string) *dataEnv {
	d.dataEnvDo.DO = *(d.dataEnvDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dataEnv) updateTableName(table string) *dataEnv {
	d.ALL = field.NewAsterisk(table)
	d.EnvID = field.NewInt32(table, "env_id")
	d.EnvGroup = field.NewString(table, "env_group")
	d.ParentID = field.NewInt32(table, "parent_id")
	d.EnvName = field.NewString(table, "env_name")
	d.EnvValue = field.NewString(table, "env_value")
	d.SortOrder = field.NewInt32(table, "sort_order")

	d.fillFieldMap()

	return d
}

func (d *dataEnv) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dataEnv) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 6)
	d.fieldMap["env_id"] = d.EnvID
	d.fieldMap["env_group"] = d.EnvGroup
	d.fieldMap["parent_id"] = d.ParentID
	d.fieldMap["env_name"] = d.EnvName
	d.fieldMap["env_value"] = d.EnvValue
	d.fieldMap["sort_order"] = d.SortOrder
}

func (d dataEnv) clone(db *gorm.DB) dataEnv {
	d.dataEnvDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dataEnv) replaceDB(db *gorm.DB) dataEnv {
	d.dataEnvDo.ReplaceDB(db)
	return d
}

type dataEnvDo struct{ gen.DO }

type IDataEnvDo interface {
	gen.SubQuery
	Debug() IDataEnvDo
	WithContext(ctx context.Context) IDataEnvDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDataEnvDo
	WriteDB() IDataEnvDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDataEnvDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDataEnvDo
	Not(conds ...gen.Condition) IDataEnvDo
	Or(conds ...gen.Condition) IDataEnvDo
	Select(conds ...field.Expr) IDataEnvDo
	Where(conds ...gen.Condition) IDataEnvDo
	Order(conds ...field.Expr) IDataEnvDo
	Distinct(cols ...field.Expr) IDataEnvDo
	Omit(cols ...field.Expr) IDataEnvDo
	Join(table schema.Tabler, on ...field.Expr) IDataEnvDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDataEnvDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDataEnvDo
	Group(cols ...field.Expr) IDataEnvDo
	Having(conds ...gen.Condition) IDataEnvDo
	Limit(limit int) IDataEnvDo
	Offset(offset int) IDataEnvDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDataEnvDo
	Unscoped() IDataEnvDo
	Create(values ...*model.DataEnv) error
	CreateInBatches(values []*model.DataEnv, batchSize int) error
	Save(values ...*model.DataEnv) error
	First() (*model.DataEnv, error)
	Take() (*model.DataEnv, error)
	Last() (*model.DataEnv, error)
	Find() ([]*model.DataEnv, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DataEnv, err error)
	FindInBatches(result *[]*model.DataEnv, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DataEnv) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDataEnvDo
	Assign(attrs ...field.AssignExpr) IDataEnvDo
	Joins(fields ...field.RelationField) IDataEnvDo
	Preload(fields ...field.RelationField) IDataEnvDo
	FirstOrInit() (*model.DataEnv, error)
	FirstOrCreate() (*model.DataEnv, error)
	FindByPage(offset int, limit int) (result []*model.DataEnv, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDataEnvDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dataEnvDo) Debug() IDataEnvDo {
	return d.withDO(d.DO.Debug())
}

func (d dataEnvDo) WithContext(ctx context.Context) IDataEnvDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dataEnvDo) ReadDB() IDataEnvDo {
	return d.Clauses(dbresolver.Read)
}

func (d dataEnvDo) WriteDB() IDataEnvDo {
	return d.Clauses(dbresolver.Write)
}

func (d dataEnvDo) Session(config *gorm.Session) IDataEnvDo {
	return d.withDO(d.DO.Session(config))
}

func (d dataEnvDo) Clauses(conds ...clause.Expression) IDataEnvDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dataEnvDo) Returning(value interface{}, columns ...string) IDataEnvDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dataEnvDo) Not(conds ...gen.Condition) IDataEnvDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dataEnvDo) Or(conds ...gen.Condition) IDataEnvDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dataEnvDo) Select(conds ...field.Expr) IDataEnvDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dataEnvDo) Where(conds ...gen.Condition) IDataEnvDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dataEnvDo) Order(conds ...field.Expr) IDataEnvDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dataEnvDo) Distinct(cols ...field.Expr) IDataEnvDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dataEnvDo) Omit(cols ...field.Expr) IDataEnvDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dataEnvDo) Join(table schema.Tabler, on ...field.Expr) IDataEnvDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dataEnvDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDataEnvDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dataEnvDo) RightJoin(table schema.Tabler, on ...field.Expr) IDataEnvDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dataEnvDo) Group(cols ...field.Expr) IDataEnvDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dataEnvDo) Having(conds ...gen.Condition) IDataEnvDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dataEnvDo) Limit(limit int) IDataEnvDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dataEnvDo) Offset(offset int) IDataEnvDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dataEnvDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDataEnvDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dataEnvDo) Unscoped() IDataEnvDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dataEnvDo) Create(values ...*model.DataEnv) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dataEnvDo) CreateInBatches(values []*model.DataEnv, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dataEnvDo) Save(values ...*model.DataEnv) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dataEnvDo) First() (*model.DataEnv, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataEnv), nil
	}
}

func (d dataEnvDo) Take() (*model.DataEnv, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataEnv), nil
	}
}

func (d dataEnvDo) Last() (*model.DataEnv, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataEnv), nil
	}
}

func (d dataEnvDo) Find() ([]*model.DataEnv, error) {
	result, err := d.DO.Find()
	return result.([]*model.DataEnv), err
}

func (d dataEnvDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DataEnv, err error) {
	buf := make([]*model.DataEnv, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dataEnvDo) FindInBatches(result *[]*model.DataEnv, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dataEnvDo) Attrs(attrs ...field.AssignExpr) IDataEnvDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dataEnvDo) Assign(attrs ...field.AssignExpr) IDataEnvDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dataEnvDo) Joins(fields ...field.RelationField) IDataEnvDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dataEnvDo) Preload(fields ...field.RelationField) IDataEnvDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dataEnvDo) FirstOrInit() (*model.DataEnv, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataEnv), nil
	}
}

func (d dataEnvDo) FirstOrCreate() (*model.DataEnv, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataEnv), nil
	}
}

func (d dataEnvDo) FindByPage(offset int, limit int) (result []*model.DataEnv, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dataEnvDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dataEnvDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dataEnvDo) Delete(models ...*model.DataEnv) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dataEnvDo) withDO(do gen.Dao) *dataEnvDo {
	d.DO = *do.(*gen.DO)
	return d
}
