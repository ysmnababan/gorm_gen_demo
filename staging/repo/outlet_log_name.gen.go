// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm_demo/staging/model"
)

func newOutletLogName(db *gorm.DB, opts ...gen.DOOption) outletLogName {
	_outletLogName := outletLogName{}

	_outletLogName.outletLogNameDo.UseDB(db, opts...)
	_outletLogName.outletLogNameDo.UseModel(&model.OutletLogName{})

	tableName := _outletLogName.outletLogNameDo.TableName()
	_outletLogName.ALL = field.NewAsterisk(tableName)
	_outletLogName.ModifiedAt = field.NewInt64(tableName, "modified_at")
	_outletLogName.ModifiedBy = field.NewString(tableName, "modified_by")
	_outletLogName.OutletLogNameID = field.NewInt64(tableName, "outlet_log_name_id")
	_outletLogName.OutletID = field.NewString(tableName, "outlet_id")
	_outletLogName.OutletName = field.NewString(tableName, "outlet_name")

	_outletLogName.fillFieldMap()

	return _outletLogName
}

type outletLogName struct {
	outletLogNameDo

	ALL             field.Asterisk
	ModifiedAt      field.Int64
	ModifiedBy      field.String
	OutletLogNameID field.Int64
	OutletID        field.String
	OutletName      field.String

	fieldMap map[string]field.Expr
}

func (o outletLogName) Table(newTableName string) *outletLogName {
	o.outletLogNameDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o outletLogName) As(alias string) *outletLogName {
	o.outletLogNameDo.DO = *(o.outletLogNameDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *outletLogName) updateTableName(table string) *outletLogName {
	o.ALL = field.NewAsterisk(table)
	o.ModifiedAt = field.NewInt64(table, "modified_at")
	o.ModifiedBy = field.NewString(table, "modified_by")
	o.OutletLogNameID = field.NewInt64(table, "outlet_log_name_id")
	o.OutletID = field.NewString(table, "outlet_id")
	o.OutletName = field.NewString(table, "outlet_name")

	o.fillFieldMap()

	return o
}

func (o *outletLogName) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *outletLogName) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 5)
	o.fieldMap["modified_at"] = o.ModifiedAt
	o.fieldMap["modified_by"] = o.ModifiedBy
	o.fieldMap["outlet_log_name_id"] = o.OutletLogNameID
	o.fieldMap["outlet_id"] = o.OutletID
	o.fieldMap["outlet_name"] = o.OutletName
}

func (o outletLogName) clone(db *gorm.DB) outletLogName {
	o.outletLogNameDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o outletLogName) replaceDB(db *gorm.DB) outletLogName {
	o.outletLogNameDo.ReplaceDB(db)
	return o
}

type outletLogNameDo struct{ gen.DO }

type IOutletLogNameDo interface {
	gen.SubQuery
	Debug() IOutletLogNameDo
	WithContext(ctx context.Context) IOutletLogNameDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOutletLogNameDo
	WriteDB() IOutletLogNameDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOutletLogNameDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOutletLogNameDo
	Not(conds ...gen.Condition) IOutletLogNameDo
	Or(conds ...gen.Condition) IOutletLogNameDo
	Select(conds ...field.Expr) IOutletLogNameDo
	Where(conds ...gen.Condition) IOutletLogNameDo
	Order(conds ...field.Expr) IOutletLogNameDo
	Distinct(cols ...field.Expr) IOutletLogNameDo
	Omit(cols ...field.Expr) IOutletLogNameDo
	Join(table schema.Tabler, on ...field.Expr) IOutletLogNameDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOutletLogNameDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOutletLogNameDo
	Group(cols ...field.Expr) IOutletLogNameDo
	Having(conds ...gen.Condition) IOutletLogNameDo
	Limit(limit int) IOutletLogNameDo
	Offset(offset int) IOutletLogNameDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOutletLogNameDo
	Unscoped() IOutletLogNameDo
	Create(values ...*model.OutletLogName) error
	CreateInBatches(values []*model.OutletLogName, batchSize int) error
	Save(values ...*model.OutletLogName) error
	First() (*model.OutletLogName, error)
	Take() (*model.OutletLogName, error)
	Last() (*model.OutletLogName, error)
	Find() ([]*model.OutletLogName, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OutletLogName, err error)
	FindInBatches(result *[]*model.OutletLogName, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OutletLogName) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOutletLogNameDo
	Assign(attrs ...field.AssignExpr) IOutletLogNameDo
	Joins(fields ...field.RelationField) IOutletLogNameDo
	Preload(fields ...field.RelationField) IOutletLogNameDo
	FirstOrInit() (*model.OutletLogName, error)
	FirstOrCreate() (*model.OutletLogName, error)
	FindByPage(offset int, limit int) (result []*model.OutletLogName, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOutletLogNameDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o outletLogNameDo) Debug() IOutletLogNameDo {
	return o.withDO(o.DO.Debug())
}

func (o outletLogNameDo) WithContext(ctx context.Context) IOutletLogNameDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o outletLogNameDo) ReadDB() IOutletLogNameDo {
	return o.Clauses(dbresolver.Read)
}

func (o outletLogNameDo) WriteDB() IOutletLogNameDo {
	return o.Clauses(dbresolver.Write)
}

func (o outletLogNameDo) Session(config *gorm.Session) IOutletLogNameDo {
	return o.withDO(o.DO.Session(config))
}

func (o outletLogNameDo) Clauses(conds ...clause.Expression) IOutletLogNameDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o outletLogNameDo) Returning(value interface{}, columns ...string) IOutletLogNameDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o outletLogNameDo) Not(conds ...gen.Condition) IOutletLogNameDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o outletLogNameDo) Or(conds ...gen.Condition) IOutletLogNameDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o outletLogNameDo) Select(conds ...field.Expr) IOutletLogNameDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o outletLogNameDo) Where(conds ...gen.Condition) IOutletLogNameDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o outletLogNameDo) Order(conds ...field.Expr) IOutletLogNameDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o outletLogNameDo) Distinct(cols ...field.Expr) IOutletLogNameDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o outletLogNameDo) Omit(cols ...field.Expr) IOutletLogNameDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o outletLogNameDo) Join(table schema.Tabler, on ...field.Expr) IOutletLogNameDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o outletLogNameDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOutletLogNameDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o outletLogNameDo) RightJoin(table schema.Tabler, on ...field.Expr) IOutletLogNameDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o outletLogNameDo) Group(cols ...field.Expr) IOutletLogNameDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o outletLogNameDo) Having(conds ...gen.Condition) IOutletLogNameDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o outletLogNameDo) Limit(limit int) IOutletLogNameDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o outletLogNameDo) Offset(offset int) IOutletLogNameDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o outletLogNameDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOutletLogNameDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o outletLogNameDo) Unscoped() IOutletLogNameDo {
	return o.withDO(o.DO.Unscoped())
}

func (o outletLogNameDo) Create(values ...*model.OutletLogName) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o outletLogNameDo) CreateInBatches(values []*model.OutletLogName, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o outletLogNameDo) Save(values ...*model.OutletLogName) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o outletLogNameDo) First() (*model.OutletLogName, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OutletLogName), nil
	}
}

func (o outletLogNameDo) Take() (*model.OutletLogName, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OutletLogName), nil
	}
}

func (o outletLogNameDo) Last() (*model.OutletLogName, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OutletLogName), nil
	}
}

func (o outletLogNameDo) Find() ([]*model.OutletLogName, error) {
	result, err := o.DO.Find()
	return result.([]*model.OutletLogName), err
}

func (o outletLogNameDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OutletLogName, err error) {
	buf := make([]*model.OutletLogName, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o outletLogNameDo) FindInBatches(result *[]*model.OutletLogName, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o outletLogNameDo) Attrs(attrs ...field.AssignExpr) IOutletLogNameDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o outletLogNameDo) Assign(attrs ...field.AssignExpr) IOutletLogNameDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o outletLogNameDo) Joins(fields ...field.RelationField) IOutletLogNameDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o outletLogNameDo) Preload(fields ...field.RelationField) IOutletLogNameDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o outletLogNameDo) FirstOrInit() (*model.OutletLogName, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OutletLogName), nil
	}
}

func (o outletLogNameDo) FirstOrCreate() (*model.OutletLogName, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OutletLogName), nil
	}
}

func (o outletLogNameDo) FindByPage(offset int, limit int) (result []*model.OutletLogName, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o outletLogNameDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o outletLogNameDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o outletLogNameDo) Delete(models ...*model.OutletLogName) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *outletLogNameDo) withDO(do gen.Dao) *outletLogNameDo {
	o.DO = *do.(*gen.DO)
	return o
}
