// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm_demo/staging/model"
)

func newOrderRefund(db *gorm.DB, opts ...gen.DOOption) orderRefund {
	_orderRefund := orderRefund{}

	_orderRefund.orderRefundDo.UseDB(db, opts...)
	_orderRefund.orderRefundDo.UseModel(&model.OrderRefund{})

	tableName := _orderRefund.orderRefundDo.TableName()
	_orderRefund.ALL = field.NewAsterisk(tableName)
	_orderRefund.CreatedAt = field.NewInt32(tableName, "created_at")
	_orderRefund.UpdatedAt = field.NewInt32(tableName, "updated_at")
	_orderRefund.RefundID = field.NewString(tableName, "refund_id")
	_orderRefund.OrderID = field.NewString(tableName, "order_id")
	_orderRefund.MerchantID = field.NewString(tableName, "merchant_id")
	_orderRefund.AccountBank = field.NewString(tableName, "account_bank")
	_orderRefund.AccountName = field.NewString(tableName, "account_name")
	_orderRefund.AccountNumber = field.NewString(tableName, "account_number")
	_orderRefund.RefundAmount = field.NewFloat64(tableName, "refund_amount")
	_orderRefund.RefundReason = field.NewString(tableName, "refund_reason")
	_orderRefund.RefundStatus = field.NewString(tableName, "refund_status")

	_orderRefund.fillFieldMap()

	return _orderRefund
}

type orderRefund struct {
	orderRefundDo

	ALL           field.Asterisk
	CreatedAt     field.Int32
	UpdatedAt     field.Int32
	RefundID      field.String
	OrderID       field.String
	MerchantID    field.String
	AccountBank   field.String
	AccountName   field.String
	AccountNumber field.String
	RefundAmount  field.Float64
	RefundReason  field.String
	RefundStatus  field.String

	fieldMap map[string]field.Expr
}

func (o orderRefund) Table(newTableName string) *orderRefund {
	o.orderRefundDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o orderRefund) As(alias string) *orderRefund {
	o.orderRefundDo.DO = *(o.orderRefundDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *orderRefund) updateTableName(table string) *orderRefund {
	o.ALL = field.NewAsterisk(table)
	o.CreatedAt = field.NewInt32(table, "created_at")
	o.UpdatedAt = field.NewInt32(table, "updated_at")
	o.RefundID = field.NewString(table, "refund_id")
	o.OrderID = field.NewString(table, "order_id")
	o.MerchantID = field.NewString(table, "merchant_id")
	o.AccountBank = field.NewString(table, "account_bank")
	o.AccountName = field.NewString(table, "account_name")
	o.AccountNumber = field.NewString(table, "account_number")
	o.RefundAmount = field.NewFloat64(table, "refund_amount")
	o.RefundReason = field.NewString(table, "refund_reason")
	o.RefundStatus = field.NewString(table, "refund_status")

	o.fillFieldMap()

	return o
}

func (o *orderRefund) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *orderRefund) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 11)
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["updated_at"] = o.UpdatedAt
	o.fieldMap["refund_id"] = o.RefundID
	o.fieldMap["order_id"] = o.OrderID
	o.fieldMap["merchant_id"] = o.MerchantID
	o.fieldMap["account_bank"] = o.AccountBank
	o.fieldMap["account_name"] = o.AccountName
	o.fieldMap["account_number"] = o.AccountNumber
	o.fieldMap["refund_amount"] = o.RefundAmount
	o.fieldMap["refund_reason"] = o.RefundReason
	o.fieldMap["refund_status"] = o.RefundStatus
}

func (o orderRefund) clone(db *gorm.DB) orderRefund {
	o.orderRefundDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o orderRefund) replaceDB(db *gorm.DB) orderRefund {
	o.orderRefundDo.ReplaceDB(db)
	return o
}

type orderRefundDo struct{ gen.DO }

type IOrderRefundDo interface {
	gen.SubQuery
	Debug() IOrderRefundDo
	WithContext(ctx context.Context) IOrderRefundDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOrderRefundDo
	WriteDB() IOrderRefundDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOrderRefundDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOrderRefundDo
	Not(conds ...gen.Condition) IOrderRefundDo
	Or(conds ...gen.Condition) IOrderRefundDo
	Select(conds ...field.Expr) IOrderRefundDo
	Where(conds ...gen.Condition) IOrderRefundDo
	Order(conds ...field.Expr) IOrderRefundDo
	Distinct(cols ...field.Expr) IOrderRefundDo
	Omit(cols ...field.Expr) IOrderRefundDo
	Join(table schema.Tabler, on ...field.Expr) IOrderRefundDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOrderRefundDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOrderRefundDo
	Group(cols ...field.Expr) IOrderRefundDo
	Having(conds ...gen.Condition) IOrderRefundDo
	Limit(limit int) IOrderRefundDo
	Offset(offset int) IOrderRefundDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderRefundDo
	Unscoped() IOrderRefundDo
	Create(values ...*model.OrderRefund) error
	CreateInBatches(values []*model.OrderRefund, batchSize int) error
	Save(values ...*model.OrderRefund) error
	First() (*model.OrderRefund, error)
	Take() (*model.OrderRefund, error)
	Last() (*model.OrderRefund, error)
	Find() ([]*model.OrderRefund, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrderRefund, err error)
	FindInBatches(result *[]*model.OrderRefund, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OrderRefund) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOrderRefundDo
	Assign(attrs ...field.AssignExpr) IOrderRefundDo
	Joins(fields ...field.RelationField) IOrderRefundDo
	Preload(fields ...field.RelationField) IOrderRefundDo
	FirstOrInit() (*model.OrderRefund, error)
	FirstOrCreate() (*model.OrderRefund, error)
	FindByPage(offset int, limit int) (result []*model.OrderRefund, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOrderRefundDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o orderRefundDo) Debug() IOrderRefundDo {
	return o.withDO(o.DO.Debug())
}

func (o orderRefundDo) WithContext(ctx context.Context) IOrderRefundDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o orderRefundDo) ReadDB() IOrderRefundDo {
	return o.Clauses(dbresolver.Read)
}

func (o orderRefundDo) WriteDB() IOrderRefundDo {
	return o.Clauses(dbresolver.Write)
}

func (o orderRefundDo) Session(config *gorm.Session) IOrderRefundDo {
	return o.withDO(o.DO.Session(config))
}

func (o orderRefundDo) Clauses(conds ...clause.Expression) IOrderRefundDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o orderRefundDo) Returning(value interface{}, columns ...string) IOrderRefundDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o orderRefundDo) Not(conds ...gen.Condition) IOrderRefundDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o orderRefundDo) Or(conds ...gen.Condition) IOrderRefundDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o orderRefundDo) Select(conds ...field.Expr) IOrderRefundDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o orderRefundDo) Where(conds ...gen.Condition) IOrderRefundDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o orderRefundDo) Order(conds ...field.Expr) IOrderRefundDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o orderRefundDo) Distinct(cols ...field.Expr) IOrderRefundDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o orderRefundDo) Omit(cols ...field.Expr) IOrderRefundDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o orderRefundDo) Join(table schema.Tabler, on ...field.Expr) IOrderRefundDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o orderRefundDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOrderRefundDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o orderRefundDo) RightJoin(table schema.Tabler, on ...field.Expr) IOrderRefundDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o orderRefundDo) Group(cols ...field.Expr) IOrderRefundDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o orderRefundDo) Having(conds ...gen.Condition) IOrderRefundDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o orderRefundDo) Limit(limit int) IOrderRefundDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o orderRefundDo) Offset(offset int) IOrderRefundDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o orderRefundDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderRefundDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o orderRefundDo) Unscoped() IOrderRefundDo {
	return o.withDO(o.DO.Unscoped())
}

func (o orderRefundDo) Create(values ...*model.OrderRefund) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o orderRefundDo) CreateInBatches(values []*model.OrderRefund, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o orderRefundDo) Save(values ...*model.OrderRefund) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o orderRefundDo) First() (*model.OrderRefund, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderRefund), nil
	}
}

func (o orderRefundDo) Take() (*model.OrderRefund, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderRefund), nil
	}
}

func (o orderRefundDo) Last() (*model.OrderRefund, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderRefund), nil
	}
}

func (o orderRefundDo) Find() ([]*model.OrderRefund, error) {
	result, err := o.DO.Find()
	return result.([]*model.OrderRefund), err
}

func (o orderRefundDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrderRefund, err error) {
	buf := make([]*model.OrderRefund, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o orderRefundDo) FindInBatches(result *[]*model.OrderRefund, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o orderRefundDo) Attrs(attrs ...field.AssignExpr) IOrderRefundDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o orderRefundDo) Assign(attrs ...field.AssignExpr) IOrderRefundDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o orderRefundDo) Joins(fields ...field.RelationField) IOrderRefundDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o orderRefundDo) Preload(fields ...field.RelationField) IOrderRefundDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o orderRefundDo) FirstOrInit() (*model.OrderRefund, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderRefund), nil
	}
}

func (o orderRefundDo) FirstOrCreate() (*model.OrderRefund, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderRefund), nil
	}
}

func (o orderRefundDo) FindByPage(offset int, limit int) (result []*model.OrderRefund, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o orderRefundDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o orderRefundDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o orderRefundDo) Delete(models ...*model.OrderRefund) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *orderRefundDo) withDO(do gen.Dao) *orderRefundDo {
	o.DO = *do.(*gen.DO)
	return o
}
