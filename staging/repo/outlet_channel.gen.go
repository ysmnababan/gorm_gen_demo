// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm_demo/staging/model"
)

func newOutletChannel(db *gorm.DB, opts ...gen.DOOption) outletChannel {
	_outletChannel := outletChannel{}

	_outletChannel.outletChannelDo.UseDB(db, opts...)
	_outletChannel.outletChannelDo.UseModel(&model.OutletChannel{})

	tableName := _outletChannel.outletChannelDo.TableName()
	_outletChannel.ALL = field.NewAsterisk(tableName)
	_outletChannel.CreatedAt = field.NewInt64(tableName, "created_at")
	_outletChannel.CreatedBy = field.NewString(tableName, "created_by")
	_outletChannel.ModifiedAt = field.NewInt64(tableName, "modified_at")
	_outletChannel.ModifiedBy = field.NewString(tableName, "modified_by")
	_outletChannel.DeletedAt = field.NewInt64(tableName, "deleted_at")
	_outletChannel.DeletedBy = field.NewString(tableName, "deleted_by")
	_outletChannel.OutletChannelID = field.NewString(tableName, "outlet_channel_id")
	_outletChannel.OutletID = field.NewString(tableName, "outlet_id")
	_outletChannel.ChannelID = field.NewString(tableName, "channel_id")
	_outletChannel.AccountNo = field.NewString(tableName, "account_no")
	_outletChannel.AccountName = field.NewString(tableName, "account_name")

	_outletChannel.fillFieldMap()

	return _outletChannel
}

type outletChannel struct {
	outletChannelDo

	ALL             field.Asterisk
	CreatedAt       field.Int64
	CreatedBy       field.String
	ModifiedAt      field.Int64
	ModifiedBy      field.String
	DeletedAt       field.Int64
	DeletedBy       field.String
	OutletChannelID field.String
	OutletID        field.String
	ChannelID       field.String
	AccountNo       field.String
	AccountName     field.String

	fieldMap map[string]field.Expr
}

func (o outletChannel) Table(newTableName string) *outletChannel {
	o.outletChannelDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o outletChannel) As(alias string) *outletChannel {
	o.outletChannelDo.DO = *(o.outletChannelDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *outletChannel) updateTableName(table string) *outletChannel {
	o.ALL = field.NewAsterisk(table)
	o.CreatedAt = field.NewInt64(table, "created_at")
	o.CreatedBy = field.NewString(table, "created_by")
	o.ModifiedAt = field.NewInt64(table, "modified_at")
	o.ModifiedBy = field.NewString(table, "modified_by")
	o.DeletedAt = field.NewInt64(table, "deleted_at")
	o.DeletedBy = field.NewString(table, "deleted_by")
	o.OutletChannelID = field.NewString(table, "outlet_channel_id")
	o.OutletID = field.NewString(table, "outlet_id")
	o.ChannelID = field.NewString(table, "channel_id")
	o.AccountNo = field.NewString(table, "account_no")
	o.AccountName = field.NewString(table, "account_name")

	o.fillFieldMap()

	return o
}

func (o *outletChannel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *outletChannel) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 11)
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["created_by"] = o.CreatedBy
	o.fieldMap["modified_at"] = o.ModifiedAt
	o.fieldMap["modified_by"] = o.ModifiedBy
	o.fieldMap["deleted_at"] = o.DeletedAt
	o.fieldMap["deleted_by"] = o.DeletedBy
	o.fieldMap["outlet_channel_id"] = o.OutletChannelID
	o.fieldMap["outlet_id"] = o.OutletID
	o.fieldMap["channel_id"] = o.ChannelID
	o.fieldMap["account_no"] = o.AccountNo
	o.fieldMap["account_name"] = o.AccountName
}

func (o outletChannel) clone(db *gorm.DB) outletChannel {
	o.outletChannelDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o outletChannel) replaceDB(db *gorm.DB) outletChannel {
	o.outletChannelDo.ReplaceDB(db)
	return o
}

type outletChannelDo struct{ gen.DO }

type IOutletChannelDo interface {
	gen.SubQuery
	Debug() IOutletChannelDo
	WithContext(ctx context.Context) IOutletChannelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOutletChannelDo
	WriteDB() IOutletChannelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOutletChannelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOutletChannelDo
	Not(conds ...gen.Condition) IOutletChannelDo
	Or(conds ...gen.Condition) IOutletChannelDo
	Select(conds ...field.Expr) IOutletChannelDo
	Where(conds ...gen.Condition) IOutletChannelDo
	Order(conds ...field.Expr) IOutletChannelDo
	Distinct(cols ...field.Expr) IOutletChannelDo
	Omit(cols ...field.Expr) IOutletChannelDo
	Join(table schema.Tabler, on ...field.Expr) IOutletChannelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOutletChannelDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOutletChannelDo
	Group(cols ...field.Expr) IOutletChannelDo
	Having(conds ...gen.Condition) IOutletChannelDo
	Limit(limit int) IOutletChannelDo
	Offset(offset int) IOutletChannelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOutletChannelDo
	Unscoped() IOutletChannelDo
	Create(values ...*model.OutletChannel) error
	CreateInBatches(values []*model.OutletChannel, batchSize int) error
	Save(values ...*model.OutletChannel) error
	First() (*model.OutletChannel, error)
	Take() (*model.OutletChannel, error)
	Last() (*model.OutletChannel, error)
	Find() ([]*model.OutletChannel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OutletChannel, err error)
	FindInBatches(result *[]*model.OutletChannel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OutletChannel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOutletChannelDo
	Assign(attrs ...field.AssignExpr) IOutletChannelDo
	Joins(fields ...field.RelationField) IOutletChannelDo
	Preload(fields ...field.RelationField) IOutletChannelDo
	FirstOrInit() (*model.OutletChannel, error)
	FirstOrCreate() (*model.OutletChannel, error)
	FindByPage(offset int, limit int) (result []*model.OutletChannel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOutletChannelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o outletChannelDo) Debug() IOutletChannelDo {
	return o.withDO(o.DO.Debug())
}

func (o outletChannelDo) WithContext(ctx context.Context) IOutletChannelDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o outletChannelDo) ReadDB() IOutletChannelDo {
	return o.Clauses(dbresolver.Read)
}

func (o outletChannelDo) WriteDB() IOutletChannelDo {
	return o.Clauses(dbresolver.Write)
}

func (o outletChannelDo) Session(config *gorm.Session) IOutletChannelDo {
	return o.withDO(o.DO.Session(config))
}

func (o outletChannelDo) Clauses(conds ...clause.Expression) IOutletChannelDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o outletChannelDo) Returning(value interface{}, columns ...string) IOutletChannelDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o outletChannelDo) Not(conds ...gen.Condition) IOutletChannelDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o outletChannelDo) Or(conds ...gen.Condition) IOutletChannelDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o outletChannelDo) Select(conds ...field.Expr) IOutletChannelDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o outletChannelDo) Where(conds ...gen.Condition) IOutletChannelDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o outletChannelDo) Order(conds ...field.Expr) IOutletChannelDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o outletChannelDo) Distinct(cols ...field.Expr) IOutletChannelDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o outletChannelDo) Omit(cols ...field.Expr) IOutletChannelDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o outletChannelDo) Join(table schema.Tabler, on ...field.Expr) IOutletChannelDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o outletChannelDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOutletChannelDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o outletChannelDo) RightJoin(table schema.Tabler, on ...field.Expr) IOutletChannelDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o outletChannelDo) Group(cols ...field.Expr) IOutletChannelDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o outletChannelDo) Having(conds ...gen.Condition) IOutletChannelDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o outletChannelDo) Limit(limit int) IOutletChannelDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o outletChannelDo) Offset(offset int) IOutletChannelDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o outletChannelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOutletChannelDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o outletChannelDo) Unscoped() IOutletChannelDo {
	return o.withDO(o.DO.Unscoped())
}

func (o outletChannelDo) Create(values ...*model.OutletChannel) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o outletChannelDo) CreateInBatches(values []*model.OutletChannel, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o outletChannelDo) Save(values ...*model.OutletChannel) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o outletChannelDo) First() (*model.OutletChannel, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OutletChannel), nil
	}
}

func (o outletChannelDo) Take() (*model.OutletChannel, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OutletChannel), nil
	}
}

func (o outletChannelDo) Last() (*model.OutletChannel, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OutletChannel), nil
	}
}

func (o outletChannelDo) Find() ([]*model.OutletChannel, error) {
	result, err := o.DO.Find()
	return result.([]*model.OutletChannel), err
}

func (o outletChannelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OutletChannel, err error) {
	buf := make([]*model.OutletChannel, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o outletChannelDo) FindInBatches(result *[]*model.OutletChannel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o outletChannelDo) Attrs(attrs ...field.AssignExpr) IOutletChannelDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o outletChannelDo) Assign(attrs ...field.AssignExpr) IOutletChannelDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o outletChannelDo) Joins(fields ...field.RelationField) IOutletChannelDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o outletChannelDo) Preload(fields ...field.RelationField) IOutletChannelDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o outletChannelDo) FirstOrInit() (*model.OutletChannel, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OutletChannel), nil
	}
}

func (o outletChannelDo) FirstOrCreate() (*model.OutletChannel, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OutletChannel), nil
	}
}

func (o outletChannelDo) FindByPage(offset int, limit int) (result []*model.OutletChannel, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o outletChannelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o outletChannelDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o outletChannelDo) Delete(models ...*model.OutletChannel) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *outletChannelDo) withDO(do gen.Dao) *outletChannelDo {
	o.DO = *do.(*gen.DO)
	return o
}
