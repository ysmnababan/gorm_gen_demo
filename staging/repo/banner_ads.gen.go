// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm_demo/staging/model"
)

func newBannerAd(db *gorm.DB, opts ...gen.DOOption) bannerAd {
	_bannerAd := bannerAd{}

	_bannerAd.bannerAdDo.UseDB(db, opts...)
	_bannerAd.bannerAdDo.UseModel(&model.BannerAd{})

	tableName := _bannerAd.bannerAdDo.TableName()
	_bannerAd.ALL = field.NewAsterisk(tableName)
	_bannerAd.BannerAdsID = field.NewString(tableName, "banner_ads_id")
	_bannerAd.BannerID = field.NewString(tableName, "banner_id")
	_bannerAd.MerchantID = field.NewString(tableName, "merchant_id")
	_bannerAd.SubmitAt = field.NewInt64(tableName, "submit_at")
	_bannerAd.ApprovalAt = field.NewInt64(tableName, "approval_at")
	_bannerAd.ApprovalStatus = field.NewString(tableName, "approval_status")
	_bannerAd.Reason = field.NewString(tableName, "reason")

	_bannerAd.fillFieldMap()

	return _bannerAd
}

type bannerAd struct {
	bannerAdDo

	ALL            field.Asterisk
	BannerAdsID    field.String
	BannerID       field.String
	MerchantID     field.String
	SubmitAt       field.Int64
	ApprovalAt     field.Int64
	ApprovalStatus field.String // SUBMITTED|APPROVED|REJECTED|CANCEL
	Reason         field.String

	fieldMap map[string]field.Expr
}

func (b bannerAd) Table(newTableName string) *bannerAd {
	b.bannerAdDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b bannerAd) As(alias string) *bannerAd {
	b.bannerAdDo.DO = *(b.bannerAdDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *bannerAd) updateTableName(table string) *bannerAd {
	b.ALL = field.NewAsterisk(table)
	b.BannerAdsID = field.NewString(table, "banner_ads_id")
	b.BannerID = field.NewString(table, "banner_id")
	b.MerchantID = field.NewString(table, "merchant_id")
	b.SubmitAt = field.NewInt64(table, "submit_at")
	b.ApprovalAt = field.NewInt64(table, "approval_at")
	b.ApprovalStatus = field.NewString(table, "approval_status")
	b.Reason = field.NewString(table, "reason")

	b.fillFieldMap()

	return b
}

func (b *bannerAd) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *bannerAd) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 7)
	b.fieldMap["banner_ads_id"] = b.BannerAdsID
	b.fieldMap["banner_id"] = b.BannerID
	b.fieldMap["merchant_id"] = b.MerchantID
	b.fieldMap["submit_at"] = b.SubmitAt
	b.fieldMap["approval_at"] = b.ApprovalAt
	b.fieldMap["approval_status"] = b.ApprovalStatus
	b.fieldMap["reason"] = b.Reason
}

func (b bannerAd) clone(db *gorm.DB) bannerAd {
	b.bannerAdDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b bannerAd) replaceDB(db *gorm.DB) bannerAd {
	b.bannerAdDo.ReplaceDB(db)
	return b
}

type bannerAdDo struct{ gen.DO }

type IBannerAdDo interface {
	gen.SubQuery
	Debug() IBannerAdDo
	WithContext(ctx context.Context) IBannerAdDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBannerAdDo
	WriteDB() IBannerAdDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBannerAdDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBannerAdDo
	Not(conds ...gen.Condition) IBannerAdDo
	Or(conds ...gen.Condition) IBannerAdDo
	Select(conds ...field.Expr) IBannerAdDo
	Where(conds ...gen.Condition) IBannerAdDo
	Order(conds ...field.Expr) IBannerAdDo
	Distinct(cols ...field.Expr) IBannerAdDo
	Omit(cols ...field.Expr) IBannerAdDo
	Join(table schema.Tabler, on ...field.Expr) IBannerAdDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBannerAdDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBannerAdDo
	Group(cols ...field.Expr) IBannerAdDo
	Having(conds ...gen.Condition) IBannerAdDo
	Limit(limit int) IBannerAdDo
	Offset(offset int) IBannerAdDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBannerAdDo
	Unscoped() IBannerAdDo
	Create(values ...*model.BannerAd) error
	CreateInBatches(values []*model.BannerAd, batchSize int) error
	Save(values ...*model.BannerAd) error
	First() (*model.BannerAd, error)
	Take() (*model.BannerAd, error)
	Last() (*model.BannerAd, error)
	Find() ([]*model.BannerAd, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BannerAd, err error)
	FindInBatches(result *[]*model.BannerAd, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.BannerAd) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBannerAdDo
	Assign(attrs ...field.AssignExpr) IBannerAdDo
	Joins(fields ...field.RelationField) IBannerAdDo
	Preload(fields ...field.RelationField) IBannerAdDo
	FirstOrInit() (*model.BannerAd, error)
	FirstOrCreate() (*model.BannerAd, error)
	FindByPage(offset int, limit int) (result []*model.BannerAd, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBannerAdDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b bannerAdDo) Debug() IBannerAdDo {
	return b.withDO(b.DO.Debug())
}

func (b bannerAdDo) WithContext(ctx context.Context) IBannerAdDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b bannerAdDo) ReadDB() IBannerAdDo {
	return b.Clauses(dbresolver.Read)
}

func (b bannerAdDo) WriteDB() IBannerAdDo {
	return b.Clauses(dbresolver.Write)
}

func (b bannerAdDo) Session(config *gorm.Session) IBannerAdDo {
	return b.withDO(b.DO.Session(config))
}

func (b bannerAdDo) Clauses(conds ...clause.Expression) IBannerAdDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b bannerAdDo) Returning(value interface{}, columns ...string) IBannerAdDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b bannerAdDo) Not(conds ...gen.Condition) IBannerAdDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b bannerAdDo) Or(conds ...gen.Condition) IBannerAdDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b bannerAdDo) Select(conds ...field.Expr) IBannerAdDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b bannerAdDo) Where(conds ...gen.Condition) IBannerAdDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b bannerAdDo) Order(conds ...field.Expr) IBannerAdDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b bannerAdDo) Distinct(cols ...field.Expr) IBannerAdDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b bannerAdDo) Omit(cols ...field.Expr) IBannerAdDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b bannerAdDo) Join(table schema.Tabler, on ...field.Expr) IBannerAdDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b bannerAdDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBannerAdDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b bannerAdDo) RightJoin(table schema.Tabler, on ...field.Expr) IBannerAdDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b bannerAdDo) Group(cols ...field.Expr) IBannerAdDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b bannerAdDo) Having(conds ...gen.Condition) IBannerAdDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b bannerAdDo) Limit(limit int) IBannerAdDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b bannerAdDo) Offset(offset int) IBannerAdDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b bannerAdDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBannerAdDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b bannerAdDo) Unscoped() IBannerAdDo {
	return b.withDO(b.DO.Unscoped())
}

func (b bannerAdDo) Create(values ...*model.BannerAd) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b bannerAdDo) CreateInBatches(values []*model.BannerAd, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b bannerAdDo) Save(values ...*model.BannerAd) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b bannerAdDo) First() (*model.BannerAd, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.BannerAd), nil
	}
}

func (b bannerAdDo) Take() (*model.BannerAd, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.BannerAd), nil
	}
}

func (b bannerAdDo) Last() (*model.BannerAd, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.BannerAd), nil
	}
}

func (b bannerAdDo) Find() ([]*model.BannerAd, error) {
	result, err := b.DO.Find()
	return result.([]*model.BannerAd), err
}

func (b bannerAdDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.BannerAd, err error) {
	buf := make([]*model.BannerAd, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b bannerAdDo) FindInBatches(result *[]*model.BannerAd, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b bannerAdDo) Attrs(attrs ...field.AssignExpr) IBannerAdDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b bannerAdDo) Assign(attrs ...field.AssignExpr) IBannerAdDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b bannerAdDo) Joins(fields ...field.RelationField) IBannerAdDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b bannerAdDo) Preload(fields ...field.RelationField) IBannerAdDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b bannerAdDo) FirstOrInit() (*model.BannerAd, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.BannerAd), nil
	}
}

func (b bannerAdDo) FirstOrCreate() (*model.BannerAd, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.BannerAd), nil
	}
}

func (b bannerAdDo) FindByPage(offset int, limit int) (result []*model.BannerAd, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b bannerAdDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b bannerAdDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b bannerAdDo) Delete(models ...*model.BannerAd) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *bannerAdDo) withDO(do gen.Dao) *bannerAdDo {
	b.DO = *do.(*gen.DO)
	return b
}
