// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm_demo/staging/model"
)

func newCart(db *gorm.DB, opts ...gen.DOOption) cart {
	_cart := cart{}

	_cart.cartDo.UseDB(db, opts...)
	_cart.cartDo.UseModel(&model.Cart{})

	tableName := _cart.cartDo.TableName()
	_cart.ALL = field.NewAsterisk(tableName)
	_cart.CartID = field.NewInt64(tableName, "cart_id")
	_cart.CustomerID = field.NewString(tableName, "customer_id")
	_cart.LocationID = field.NewString(tableName, "location_id")
	_cart.OutletID = field.NewString(tableName, "outlet_id")
	_cart.CreatedAt = field.NewInt64(tableName, "created_at")
	_cart.CreatedBy = field.NewString(tableName, "created_by")
	_cart.ModifiedAt = field.NewInt64(tableName, "modified_at")
	_cart.ModifiedBy = field.NewString(tableName, "modified_by")
	_cart.DeletedAt = field.NewInt64(tableName, "deleted_at")
	_cart.DeletedBy = field.NewString(tableName, "deleted_by")

	_cart.fillFieldMap()

	return _cart
}

type cart struct {
	cartDo

	ALL        field.Asterisk
	CartID     field.Int64
	CustomerID field.String
	LocationID field.String
	OutletID   field.String
	CreatedAt  field.Int64
	CreatedBy  field.String
	ModifiedAt field.Int64
	ModifiedBy field.String
	DeletedAt  field.Int64
	DeletedBy  field.String

	fieldMap map[string]field.Expr
}

func (c cart) Table(newTableName string) *cart {
	c.cartDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cart) As(alias string) *cart {
	c.cartDo.DO = *(c.cartDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cart) updateTableName(table string) *cart {
	c.ALL = field.NewAsterisk(table)
	c.CartID = field.NewInt64(table, "cart_id")
	c.CustomerID = field.NewString(table, "customer_id")
	c.LocationID = field.NewString(table, "location_id")
	c.OutletID = field.NewString(table, "outlet_id")
	c.CreatedAt = field.NewInt64(table, "created_at")
	c.CreatedBy = field.NewString(table, "created_by")
	c.ModifiedAt = field.NewInt64(table, "modified_at")
	c.ModifiedBy = field.NewString(table, "modified_by")
	c.DeletedAt = field.NewInt64(table, "deleted_at")
	c.DeletedBy = field.NewString(table, "deleted_by")

	c.fillFieldMap()

	return c
}

func (c *cart) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cart) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 10)
	c.fieldMap["cart_id"] = c.CartID
	c.fieldMap["customer_id"] = c.CustomerID
	c.fieldMap["location_id"] = c.LocationID
	c.fieldMap["outlet_id"] = c.OutletID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["created_by"] = c.CreatedBy
	c.fieldMap["modified_at"] = c.ModifiedAt
	c.fieldMap["modified_by"] = c.ModifiedBy
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["deleted_by"] = c.DeletedBy
}

func (c cart) clone(db *gorm.DB) cart {
	c.cartDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cart) replaceDB(db *gorm.DB) cart {
	c.cartDo.ReplaceDB(db)
	return c
}

type cartDo struct{ gen.DO }

type ICartDo interface {
	gen.SubQuery
	Debug() ICartDo
	WithContext(ctx context.Context) ICartDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICartDo
	WriteDB() ICartDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICartDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICartDo
	Not(conds ...gen.Condition) ICartDo
	Or(conds ...gen.Condition) ICartDo
	Select(conds ...field.Expr) ICartDo
	Where(conds ...gen.Condition) ICartDo
	Order(conds ...field.Expr) ICartDo
	Distinct(cols ...field.Expr) ICartDo
	Omit(cols ...field.Expr) ICartDo
	Join(table schema.Tabler, on ...field.Expr) ICartDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICartDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICartDo
	Group(cols ...field.Expr) ICartDo
	Having(conds ...gen.Condition) ICartDo
	Limit(limit int) ICartDo
	Offset(offset int) ICartDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICartDo
	Unscoped() ICartDo
	Create(values ...*model.Cart) error
	CreateInBatches(values []*model.Cart, batchSize int) error
	Save(values ...*model.Cart) error
	First() (*model.Cart, error)
	Take() (*model.Cart, error)
	Last() (*model.Cart, error)
	Find() ([]*model.Cart, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Cart, err error)
	FindInBatches(result *[]*model.Cart, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Cart) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICartDo
	Assign(attrs ...field.AssignExpr) ICartDo
	Joins(fields ...field.RelationField) ICartDo
	Preload(fields ...field.RelationField) ICartDo
	FirstOrInit() (*model.Cart, error)
	FirstOrCreate() (*model.Cart, error)
	FindByPage(offset int, limit int) (result []*model.Cart, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICartDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c cartDo) Debug() ICartDo {
	return c.withDO(c.DO.Debug())
}

func (c cartDo) WithContext(ctx context.Context) ICartDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cartDo) ReadDB() ICartDo {
	return c.Clauses(dbresolver.Read)
}

func (c cartDo) WriteDB() ICartDo {
	return c.Clauses(dbresolver.Write)
}

func (c cartDo) Session(config *gorm.Session) ICartDo {
	return c.withDO(c.DO.Session(config))
}

func (c cartDo) Clauses(conds ...clause.Expression) ICartDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cartDo) Returning(value interface{}, columns ...string) ICartDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cartDo) Not(conds ...gen.Condition) ICartDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cartDo) Or(conds ...gen.Condition) ICartDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cartDo) Select(conds ...field.Expr) ICartDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cartDo) Where(conds ...gen.Condition) ICartDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cartDo) Order(conds ...field.Expr) ICartDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cartDo) Distinct(cols ...field.Expr) ICartDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cartDo) Omit(cols ...field.Expr) ICartDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cartDo) Join(table schema.Tabler, on ...field.Expr) ICartDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cartDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICartDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cartDo) RightJoin(table schema.Tabler, on ...field.Expr) ICartDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cartDo) Group(cols ...field.Expr) ICartDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cartDo) Having(conds ...gen.Condition) ICartDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cartDo) Limit(limit int) ICartDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cartDo) Offset(offset int) ICartDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cartDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICartDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cartDo) Unscoped() ICartDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cartDo) Create(values ...*model.Cart) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cartDo) CreateInBatches(values []*model.Cart, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cartDo) Save(values ...*model.Cart) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cartDo) First() (*model.Cart, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Cart), nil
	}
}

func (c cartDo) Take() (*model.Cart, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Cart), nil
	}
}

func (c cartDo) Last() (*model.Cart, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Cart), nil
	}
}

func (c cartDo) Find() ([]*model.Cart, error) {
	result, err := c.DO.Find()
	return result.([]*model.Cart), err
}

func (c cartDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Cart, err error) {
	buf := make([]*model.Cart, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cartDo) FindInBatches(result *[]*model.Cart, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cartDo) Attrs(attrs ...field.AssignExpr) ICartDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cartDo) Assign(attrs ...field.AssignExpr) ICartDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cartDo) Joins(fields ...field.RelationField) ICartDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cartDo) Preload(fields ...field.RelationField) ICartDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cartDo) FirstOrInit() (*model.Cart, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Cart), nil
	}
}

func (c cartDo) FirstOrCreate() (*model.Cart, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Cart), nil
	}
}

func (c cartDo) FindByPage(offset int, limit int) (result []*model.Cart, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cartDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cartDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cartDo) Delete(models ...*model.Cart) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cartDo) withDO(do gen.Dao) *cartDo {
	c.DO = *do.(*gen.DO)
	return c
}
