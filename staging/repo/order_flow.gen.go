// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm_demo/staging/model"
)

func newOrderFlow(db *gorm.DB, opts ...gen.DOOption) orderFlow {
	_orderFlow := orderFlow{}

	_orderFlow.orderFlowDo.UseDB(db, opts...)
	_orderFlow.orderFlowDo.UseModel(&model.OrderFlow{})

	tableName := _orderFlow.orderFlowDo.TableName()
	_orderFlow.ALL = field.NewAsterisk(tableName)
	_orderFlow.OrderFlowID = field.NewInt64(tableName, "order_flow_id")
	_orderFlow.OrderID = field.NewString(tableName, "order_id")
	_orderFlow.CreatedAt = field.NewInt64(tableName, "created_at")
	_orderFlow.FlowName = field.NewString(tableName, "flow_name")

	_orderFlow.fillFieldMap()

	return _orderFlow
}

type orderFlow struct {
	orderFlowDo

	ALL         field.Asterisk
	OrderFlowID field.Int64
	OrderID     field.String
	CreatedAt   field.Int64
	FlowName    field.String

	fieldMap map[string]field.Expr
}

func (o orderFlow) Table(newTableName string) *orderFlow {
	o.orderFlowDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o orderFlow) As(alias string) *orderFlow {
	o.orderFlowDo.DO = *(o.orderFlowDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *orderFlow) updateTableName(table string) *orderFlow {
	o.ALL = field.NewAsterisk(table)
	o.OrderFlowID = field.NewInt64(table, "order_flow_id")
	o.OrderID = field.NewString(table, "order_id")
	o.CreatedAt = field.NewInt64(table, "created_at")
	o.FlowName = field.NewString(table, "flow_name")

	o.fillFieldMap()

	return o
}

func (o *orderFlow) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *orderFlow) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 4)
	o.fieldMap["order_flow_id"] = o.OrderFlowID
	o.fieldMap["order_id"] = o.OrderID
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["flow_name"] = o.FlowName
}

func (o orderFlow) clone(db *gorm.DB) orderFlow {
	o.orderFlowDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o orderFlow) replaceDB(db *gorm.DB) orderFlow {
	o.orderFlowDo.ReplaceDB(db)
	return o
}

type orderFlowDo struct{ gen.DO }

type IOrderFlowDo interface {
	gen.SubQuery
	Debug() IOrderFlowDo
	WithContext(ctx context.Context) IOrderFlowDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOrderFlowDo
	WriteDB() IOrderFlowDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOrderFlowDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOrderFlowDo
	Not(conds ...gen.Condition) IOrderFlowDo
	Or(conds ...gen.Condition) IOrderFlowDo
	Select(conds ...field.Expr) IOrderFlowDo
	Where(conds ...gen.Condition) IOrderFlowDo
	Order(conds ...field.Expr) IOrderFlowDo
	Distinct(cols ...field.Expr) IOrderFlowDo
	Omit(cols ...field.Expr) IOrderFlowDo
	Join(table schema.Tabler, on ...field.Expr) IOrderFlowDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOrderFlowDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOrderFlowDo
	Group(cols ...field.Expr) IOrderFlowDo
	Having(conds ...gen.Condition) IOrderFlowDo
	Limit(limit int) IOrderFlowDo
	Offset(offset int) IOrderFlowDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderFlowDo
	Unscoped() IOrderFlowDo
	Create(values ...*model.OrderFlow) error
	CreateInBatches(values []*model.OrderFlow, batchSize int) error
	Save(values ...*model.OrderFlow) error
	First() (*model.OrderFlow, error)
	Take() (*model.OrderFlow, error)
	Last() (*model.OrderFlow, error)
	Find() ([]*model.OrderFlow, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrderFlow, err error)
	FindInBatches(result *[]*model.OrderFlow, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OrderFlow) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOrderFlowDo
	Assign(attrs ...field.AssignExpr) IOrderFlowDo
	Joins(fields ...field.RelationField) IOrderFlowDo
	Preload(fields ...field.RelationField) IOrderFlowDo
	FirstOrInit() (*model.OrderFlow, error)
	FirstOrCreate() (*model.OrderFlow, error)
	FindByPage(offset int, limit int) (result []*model.OrderFlow, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOrderFlowDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o orderFlowDo) Debug() IOrderFlowDo {
	return o.withDO(o.DO.Debug())
}

func (o orderFlowDo) WithContext(ctx context.Context) IOrderFlowDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o orderFlowDo) ReadDB() IOrderFlowDo {
	return o.Clauses(dbresolver.Read)
}

func (o orderFlowDo) WriteDB() IOrderFlowDo {
	return o.Clauses(dbresolver.Write)
}

func (o orderFlowDo) Session(config *gorm.Session) IOrderFlowDo {
	return o.withDO(o.DO.Session(config))
}

func (o orderFlowDo) Clauses(conds ...clause.Expression) IOrderFlowDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o orderFlowDo) Returning(value interface{}, columns ...string) IOrderFlowDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o orderFlowDo) Not(conds ...gen.Condition) IOrderFlowDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o orderFlowDo) Or(conds ...gen.Condition) IOrderFlowDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o orderFlowDo) Select(conds ...field.Expr) IOrderFlowDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o orderFlowDo) Where(conds ...gen.Condition) IOrderFlowDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o orderFlowDo) Order(conds ...field.Expr) IOrderFlowDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o orderFlowDo) Distinct(cols ...field.Expr) IOrderFlowDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o orderFlowDo) Omit(cols ...field.Expr) IOrderFlowDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o orderFlowDo) Join(table schema.Tabler, on ...field.Expr) IOrderFlowDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o orderFlowDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOrderFlowDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o orderFlowDo) RightJoin(table schema.Tabler, on ...field.Expr) IOrderFlowDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o orderFlowDo) Group(cols ...field.Expr) IOrderFlowDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o orderFlowDo) Having(conds ...gen.Condition) IOrderFlowDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o orderFlowDo) Limit(limit int) IOrderFlowDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o orderFlowDo) Offset(offset int) IOrderFlowDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o orderFlowDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOrderFlowDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o orderFlowDo) Unscoped() IOrderFlowDo {
	return o.withDO(o.DO.Unscoped())
}

func (o orderFlowDo) Create(values ...*model.OrderFlow) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o orderFlowDo) CreateInBatches(values []*model.OrderFlow, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o orderFlowDo) Save(values ...*model.OrderFlow) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o orderFlowDo) First() (*model.OrderFlow, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderFlow), nil
	}
}

func (o orderFlowDo) Take() (*model.OrderFlow, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderFlow), nil
	}
}

func (o orderFlowDo) Last() (*model.OrderFlow, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderFlow), nil
	}
}

func (o orderFlowDo) Find() ([]*model.OrderFlow, error) {
	result, err := o.DO.Find()
	return result.([]*model.OrderFlow), err
}

func (o orderFlowDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OrderFlow, err error) {
	buf := make([]*model.OrderFlow, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o orderFlowDo) FindInBatches(result *[]*model.OrderFlow, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o orderFlowDo) Attrs(attrs ...field.AssignExpr) IOrderFlowDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o orderFlowDo) Assign(attrs ...field.AssignExpr) IOrderFlowDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o orderFlowDo) Joins(fields ...field.RelationField) IOrderFlowDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o orderFlowDo) Preload(fields ...field.RelationField) IOrderFlowDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o orderFlowDo) FirstOrInit() (*model.OrderFlow, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderFlow), nil
	}
}

func (o orderFlowDo) FirstOrCreate() (*model.OrderFlow, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OrderFlow), nil
	}
}

func (o orderFlowDo) FindByPage(offset int, limit int) (result []*model.OrderFlow, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o orderFlowDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o orderFlowDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o orderFlowDo) Delete(models ...*model.OrderFlow) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *orderFlowDo) withDO(do gen.Dao) *orderFlowDo {
	o.DO = *do.(*gen.DO)
	return o
}
