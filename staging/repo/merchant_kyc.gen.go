// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm_demo/staging/model"
)

func newMerchantKyc(db *gorm.DB, opts ...gen.DOOption) merchantKyc {
	_merchantKyc := merchantKyc{}

	_merchantKyc.merchantKycDo.UseDB(db, opts...)
	_merchantKyc.merchantKycDo.UseModel(&model.MerchantKyc{})

	tableName := _merchantKyc.merchantKycDo.TableName()
	_merchantKyc.ALL = field.NewAsterisk(tableName)
	_merchantKyc.MerchantKycID = field.NewString(tableName, "merchant_kyc_id")
	_merchantKyc.MerchantID = field.NewString(tableName, "merchant_id")
	_merchantKyc.IdentityNo = field.NewString(tableName, "identity_no")
	_merchantKyc.BirthPlace = field.NewString(tableName, "birth_place")
	_merchantKyc.Dob = field.NewString(tableName, "dob")
	_merchantKyc.Address = field.NewString(tableName, "address")
	_merchantKyc.URLIdentity = field.NewString(tableName, "url_identity")
	_merchantKyc.URLSelfie = field.NewString(tableName, "url_selfie")

	_merchantKyc.fillFieldMap()

	return _merchantKyc
}

type merchantKyc struct {
	merchantKycDo

	ALL           field.Asterisk
	MerchantKycID field.String
	MerchantID    field.String
	IdentityNo    field.String
	BirthPlace    field.String
	Dob           field.String
	Address       field.String
	URLIdentity   field.String
	URLSelfie     field.String

	fieldMap map[string]field.Expr
}

func (m merchantKyc) Table(newTableName string) *merchantKyc {
	m.merchantKycDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m merchantKyc) As(alias string) *merchantKyc {
	m.merchantKycDo.DO = *(m.merchantKycDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *merchantKyc) updateTableName(table string) *merchantKyc {
	m.ALL = field.NewAsterisk(table)
	m.MerchantKycID = field.NewString(table, "merchant_kyc_id")
	m.MerchantID = field.NewString(table, "merchant_id")
	m.IdentityNo = field.NewString(table, "identity_no")
	m.BirthPlace = field.NewString(table, "birth_place")
	m.Dob = field.NewString(table, "dob")
	m.Address = field.NewString(table, "address")
	m.URLIdentity = field.NewString(table, "url_identity")
	m.URLSelfie = field.NewString(table, "url_selfie")

	m.fillFieldMap()

	return m
}

func (m *merchantKyc) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *merchantKyc) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 8)
	m.fieldMap["merchant_kyc_id"] = m.MerchantKycID
	m.fieldMap["merchant_id"] = m.MerchantID
	m.fieldMap["identity_no"] = m.IdentityNo
	m.fieldMap["birth_place"] = m.BirthPlace
	m.fieldMap["dob"] = m.Dob
	m.fieldMap["address"] = m.Address
	m.fieldMap["url_identity"] = m.URLIdentity
	m.fieldMap["url_selfie"] = m.URLSelfie
}

func (m merchantKyc) clone(db *gorm.DB) merchantKyc {
	m.merchantKycDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m merchantKyc) replaceDB(db *gorm.DB) merchantKyc {
	m.merchantKycDo.ReplaceDB(db)
	return m
}

type merchantKycDo struct{ gen.DO }

type IMerchantKycDo interface {
	gen.SubQuery
	Debug() IMerchantKycDo
	WithContext(ctx context.Context) IMerchantKycDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMerchantKycDo
	WriteDB() IMerchantKycDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMerchantKycDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMerchantKycDo
	Not(conds ...gen.Condition) IMerchantKycDo
	Or(conds ...gen.Condition) IMerchantKycDo
	Select(conds ...field.Expr) IMerchantKycDo
	Where(conds ...gen.Condition) IMerchantKycDo
	Order(conds ...field.Expr) IMerchantKycDo
	Distinct(cols ...field.Expr) IMerchantKycDo
	Omit(cols ...field.Expr) IMerchantKycDo
	Join(table schema.Tabler, on ...field.Expr) IMerchantKycDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMerchantKycDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMerchantKycDo
	Group(cols ...field.Expr) IMerchantKycDo
	Having(conds ...gen.Condition) IMerchantKycDo
	Limit(limit int) IMerchantKycDo
	Offset(offset int) IMerchantKycDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMerchantKycDo
	Unscoped() IMerchantKycDo
	Create(values ...*model.MerchantKyc) error
	CreateInBatches(values []*model.MerchantKyc, batchSize int) error
	Save(values ...*model.MerchantKyc) error
	First() (*model.MerchantKyc, error)
	Take() (*model.MerchantKyc, error)
	Last() (*model.MerchantKyc, error)
	Find() ([]*model.MerchantKyc, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MerchantKyc, err error)
	FindInBatches(result *[]*model.MerchantKyc, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MerchantKyc) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMerchantKycDo
	Assign(attrs ...field.AssignExpr) IMerchantKycDo
	Joins(fields ...field.RelationField) IMerchantKycDo
	Preload(fields ...field.RelationField) IMerchantKycDo
	FirstOrInit() (*model.MerchantKyc, error)
	FirstOrCreate() (*model.MerchantKyc, error)
	FindByPage(offset int, limit int) (result []*model.MerchantKyc, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMerchantKycDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m merchantKycDo) Debug() IMerchantKycDo {
	return m.withDO(m.DO.Debug())
}

func (m merchantKycDo) WithContext(ctx context.Context) IMerchantKycDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m merchantKycDo) ReadDB() IMerchantKycDo {
	return m.Clauses(dbresolver.Read)
}

func (m merchantKycDo) WriteDB() IMerchantKycDo {
	return m.Clauses(dbresolver.Write)
}

func (m merchantKycDo) Session(config *gorm.Session) IMerchantKycDo {
	return m.withDO(m.DO.Session(config))
}

func (m merchantKycDo) Clauses(conds ...clause.Expression) IMerchantKycDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m merchantKycDo) Returning(value interface{}, columns ...string) IMerchantKycDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m merchantKycDo) Not(conds ...gen.Condition) IMerchantKycDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m merchantKycDo) Or(conds ...gen.Condition) IMerchantKycDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m merchantKycDo) Select(conds ...field.Expr) IMerchantKycDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m merchantKycDo) Where(conds ...gen.Condition) IMerchantKycDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m merchantKycDo) Order(conds ...field.Expr) IMerchantKycDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m merchantKycDo) Distinct(cols ...field.Expr) IMerchantKycDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m merchantKycDo) Omit(cols ...field.Expr) IMerchantKycDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m merchantKycDo) Join(table schema.Tabler, on ...field.Expr) IMerchantKycDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m merchantKycDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMerchantKycDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m merchantKycDo) RightJoin(table schema.Tabler, on ...field.Expr) IMerchantKycDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m merchantKycDo) Group(cols ...field.Expr) IMerchantKycDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m merchantKycDo) Having(conds ...gen.Condition) IMerchantKycDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m merchantKycDo) Limit(limit int) IMerchantKycDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m merchantKycDo) Offset(offset int) IMerchantKycDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m merchantKycDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMerchantKycDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m merchantKycDo) Unscoped() IMerchantKycDo {
	return m.withDO(m.DO.Unscoped())
}

func (m merchantKycDo) Create(values ...*model.MerchantKyc) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m merchantKycDo) CreateInBatches(values []*model.MerchantKyc, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m merchantKycDo) Save(values ...*model.MerchantKyc) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m merchantKycDo) First() (*model.MerchantKyc, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MerchantKyc), nil
	}
}

func (m merchantKycDo) Take() (*model.MerchantKyc, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MerchantKyc), nil
	}
}

func (m merchantKycDo) Last() (*model.MerchantKyc, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MerchantKyc), nil
	}
}

func (m merchantKycDo) Find() ([]*model.MerchantKyc, error) {
	result, err := m.DO.Find()
	return result.([]*model.MerchantKyc), err
}

func (m merchantKycDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MerchantKyc, err error) {
	buf := make([]*model.MerchantKyc, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m merchantKycDo) FindInBatches(result *[]*model.MerchantKyc, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m merchantKycDo) Attrs(attrs ...field.AssignExpr) IMerchantKycDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m merchantKycDo) Assign(attrs ...field.AssignExpr) IMerchantKycDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m merchantKycDo) Joins(fields ...field.RelationField) IMerchantKycDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m merchantKycDo) Preload(fields ...field.RelationField) IMerchantKycDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m merchantKycDo) FirstOrInit() (*model.MerchantKyc, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MerchantKyc), nil
	}
}

func (m merchantKycDo) FirstOrCreate() (*model.MerchantKyc, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MerchantKyc), nil
	}
}

func (m merchantKycDo) FindByPage(offset int, limit int) (result []*model.MerchantKyc, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m merchantKycDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m merchantKycDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m merchantKycDo) Delete(models ...*model.MerchantKyc) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *merchantKycDo) withDO(do gen.Dao) *merchantKycDo {
	m.DO = *do.(*gen.DO)
	return m
}
