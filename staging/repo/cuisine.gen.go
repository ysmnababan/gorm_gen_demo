// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm_demo/staging/model"
)

func newCuisine(db *gorm.DB, opts ...gen.DOOption) cuisine {
	_cuisine := cuisine{}

	_cuisine.cuisineDo.UseDB(db, opts...)
	_cuisine.cuisineDo.UseModel(&model.Cuisine{})

	tableName := _cuisine.cuisineDo.TableName()
	_cuisine.ALL = field.NewAsterisk(tableName)
	_cuisine.CreatedAt = field.NewInt64(tableName, "created_at")
	_cuisine.CreatedBy = field.NewString(tableName, "created_by")
	_cuisine.ModifiedAt = field.NewInt64(tableName, "modified_at")
	_cuisine.ModifiedBy = field.NewString(tableName, "modified_by")
	_cuisine.DeletedAt = field.NewInt64(tableName, "deleted_at")
	_cuisine.DeletedBy = field.NewString(tableName, "deleted_by")
	_cuisine.CuisineID = field.NewString(tableName, "cuisine_id")
	_cuisine.CuisineName = field.NewString(tableName, "cuisine_name")
	_cuisine.URLIcon = field.NewString(tableName, "url_icon")

	_cuisine.fillFieldMap()

	return _cuisine
}

type cuisine struct {
	cuisineDo

	ALL         field.Asterisk
	CreatedAt   field.Int64
	CreatedBy   field.String
	ModifiedAt  field.Int64
	ModifiedBy  field.String
	DeletedAt   field.Int64
	DeletedBy   field.String
	CuisineID   field.String
	CuisineName field.String
	URLIcon     field.String

	fieldMap map[string]field.Expr
}

func (c cuisine) Table(newTableName string) *cuisine {
	c.cuisineDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cuisine) As(alias string) *cuisine {
	c.cuisineDo.DO = *(c.cuisineDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cuisine) updateTableName(table string) *cuisine {
	c.ALL = field.NewAsterisk(table)
	c.CreatedAt = field.NewInt64(table, "created_at")
	c.CreatedBy = field.NewString(table, "created_by")
	c.ModifiedAt = field.NewInt64(table, "modified_at")
	c.ModifiedBy = field.NewString(table, "modified_by")
	c.DeletedAt = field.NewInt64(table, "deleted_at")
	c.DeletedBy = field.NewString(table, "deleted_by")
	c.CuisineID = field.NewString(table, "cuisine_id")
	c.CuisineName = field.NewString(table, "cuisine_name")
	c.URLIcon = field.NewString(table, "url_icon")

	c.fillFieldMap()

	return c
}

func (c *cuisine) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cuisine) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 9)
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["created_by"] = c.CreatedBy
	c.fieldMap["modified_at"] = c.ModifiedAt
	c.fieldMap["modified_by"] = c.ModifiedBy
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["deleted_by"] = c.DeletedBy
	c.fieldMap["cuisine_id"] = c.CuisineID
	c.fieldMap["cuisine_name"] = c.CuisineName
	c.fieldMap["url_icon"] = c.URLIcon
}

func (c cuisine) clone(db *gorm.DB) cuisine {
	c.cuisineDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cuisine) replaceDB(db *gorm.DB) cuisine {
	c.cuisineDo.ReplaceDB(db)
	return c
}

type cuisineDo struct{ gen.DO }

type ICuisineDo interface {
	gen.SubQuery
	Debug() ICuisineDo
	WithContext(ctx context.Context) ICuisineDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICuisineDo
	WriteDB() ICuisineDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICuisineDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICuisineDo
	Not(conds ...gen.Condition) ICuisineDo
	Or(conds ...gen.Condition) ICuisineDo
	Select(conds ...field.Expr) ICuisineDo
	Where(conds ...gen.Condition) ICuisineDo
	Order(conds ...field.Expr) ICuisineDo
	Distinct(cols ...field.Expr) ICuisineDo
	Omit(cols ...field.Expr) ICuisineDo
	Join(table schema.Tabler, on ...field.Expr) ICuisineDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICuisineDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICuisineDo
	Group(cols ...field.Expr) ICuisineDo
	Having(conds ...gen.Condition) ICuisineDo
	Limit(limit int) ICuisineDo
	Offset(offset int) ICuisineDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICuisineDo
	Unscoped() ICuisineDo
	Create(values ...*model.Cuisine) error
	CreateInBatches(values []*model.Cuisine, batchSize int) error
	Save(values ...*model.Cuisine) error
	First() (*model.Cuisine, error)
	Take() (*model.Cuisine, error)
	Last() (*model.Cuisine, error)
	Find() ([]*model.Cuisine, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Cuisine, err error)
	FindInBatches(result *[]*model.Cuisine, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Cuisine) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICuisineDo
	Assign(attrs ...field.AssignExpr) ICuisineDo
	Joins(fields ...field.RelationField) ICuisineDo
	Preload(fields ...field.RelationField) ICuisineDo
	FirstOrInit() (*model.Cuisine, error)
	FirstOrCreate() (*model.Cuisine, error)
	FindByPage(offset int, limit int) (result []*model.Cuisine, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICuisineDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c cuisineDo) Debug() ICuisineDo {
	return c.withDO(c.DO.Debug())
}

func (c cuisineDo) WithContext(ctx context.Context) ICuisineDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cuisineDo) ReadDB() ICuisineDo {
	return c.Clauses(dbresolver.Read)
}

func (c cuisineDo) WriteDB() ICuisineDo {
	return c.Clauses(dbresolver.Write)
}

func (c cuisineDo) Session(config *gorm.Session) ICuisineDo {
	return c.withDO(c.DO.Session(config))
}

func (c cuisineDo) Clauses(conds ...clause.Expression) ICuisineDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cuisineDo) Returning(value interface{}, columns ...string) ICuisineDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cuisineDo) Not(conds ...gen.Condition) ICuisineDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cuisineDo) Or(conds ...gen.Condition) ICuisineDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cuisineDo) Select(conds ...field.Expr) ICuisineDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cuisineDo) Where(conds ...gen.Condition) ICuisineDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cuisineDo) Order(conds ...field.Expr) ICuisineDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cuisineDo) Distinct(cols ...field.Expr) ICuisineDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cuisineDo) Omit(cols ...field.Expr) ICuisineDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cuisineDo) Join(table schema.Tabler, on ...field.Expr) ICuisineDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cuisineDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICuisineDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cuisineDo) RightJoin(table schema.Tabler, on ...field.Expr) ICuisineDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cuisineDo) Group(cols ...field.Expr) ICuisineDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cuisineDo) Having(conds ...gen.Condition) ICuisineDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cuisineDo) Limit(limit int) ICuisineDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cuisineDo) Offset(offset int) ICuisineDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cuisineDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICuisineDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cuisineDo) Unscoped() ICuisineDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cuisineDo) Create(values ...*model.Cuisine) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cuisineDo) CreateInBatches(values []*model.Cuisine, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cuisineDo) Save(values ...*model.Cuisine) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cuisineDo) First() (*model.Cuisine, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Cuisine), nil
	}
}

func (c cuisineDo) Take() (*model.Cuisine, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Cuisine), nil
	}
}

func (c cuisineDo) Last() (*model.Cuisine, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Cuisine), nil
	}
}

func (c cuisineDo) Find() ([]*model.Cuisine, error) {
	result, err := c.DO.Find()
	return result.([]*model.Cuisine), err
}

func (c cuisineDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Cuisine, err error) {
	buf := make([]*model.Cuisine, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cuisineDo) FindInBatches(result *[]*model.Cuisine, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cuisineDo) Attrs(attrs ...field.AssignExpr) ICuisineDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cuisineDo) Assign(attrs ...field.AssignExpr) ICuisineDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cuisineDo) Joins(fields ...field.RelationField) ICuisineDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cuisineDo) Preload(fields ...field.RelationField) ICuisineDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cuisineDo) FirstOrInit() (*model.Cuisine, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Cuisine), nil
	}
}

func (c cuisineDo) FirstOrCreate() (*model.Cuisine, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Cuisine), nil
	}
}

func (c cuisineDo) FindByPage(offset int, limit int) (result []*model.Cuisine, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cuisineDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cuisineDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cuisineDo) Delete(models ...*model.Cuisine) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cuisineDo) withDO(do gen.Dao) *cuisineDo {
	c.DO = *do.(*gen.DO)
	return c
}
