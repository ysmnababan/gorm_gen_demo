// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm_demo/staging/model"
)

func newOutletCuisine(db *gorm.DB, opts ...gen.DOOption) outletCuisine {
	_outletCuisine := outletCuisine{}

	_outletCuisine.outletCuisineDo.UseDB(db, opts...)
	_outletCuisine.outletCuisineDo.UseModel(&model.OutletCuisine{})

	tableName := _outletCuisine.outletCuisineDo.TableName()
	_outletCuisine.ALL = field.NewAsterisk(tableName)
	_outletCuisine.CreatedAt = field.NewInt64(tableName, "created_at")
	_outletCuisine.CreatedBy = field.NewString(tableName, "created_by")
	_outletCuisine.ModifiedAt = field.NewInt64(tableName, "modified_at")
	_outletCuisine.ModifiedBy = field.NewString(tableName, "modified_by")
	_outletCuisine.DeletedAt = field.NewInt64(tableName, "deleted_at")
	_outletCuisine.DeletedBy = field.NewString(tableName, "deleted_by")
	_outletCuisine.OutletCuisineID = field.NewString(tableName, "outlet_cuisine_id")
	_outletCuisine.OutletID = field.NewString(tableName, "outlet_id")
	_outletCuisine.CuisineID = field.NewString(tableName, "cuisine_id")

	_outletCuisine.fillFieldMap()

	return _outletCuisine
}

type outletCuisine struct {
	outletCuisineDo

	ALL             field.Asterisk
	CreatedAt       field.Int64
	CreatedBy       field.String
	ModifiedAt      field.Int64
	ModifiedBy      field.String
	DeletedAt       field.Int64
	DeletedBy       field.String
	OutletCuisineID field.String
	OutletID        field.String
	CuisineID       field.String

	fieldMap map[string]field.Expr
}

func (o outletCuisine) Table(newTableName string) *outletCuisine {
	o.outletCuisineDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o outletCuisine) As(alias string) *outletCuisine {
	o.outletCuisineDo.DO = *(o.outletCuisineDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *outletCuisine) updateTableName(table string) *outletCuisine {
	o.ALL = field.NewAsterisk(table)
	o.CreatedAt = field.NewInt64(table, "created_at")
	o.CreatedBy = field.NewString(table, "created_by")
	o.ModifiedAt = field.NewInt64(table, "modified_at")
	o.ModifiedBy = field.NewString(table, "modified_by")
	o.DeletedAt = field.NewInt64(table, "deleted_at")
	o.DeletedBy = field.NewString(table, "deleted_by")
	o.OutletCuisineID = field.NewString(table, "outlet_cuisine_id")
	o.OutletID = field.NewString(table, "outlet_id")
	o.CuisineID = field.NewString(table, "cuisine_id")

	o.fillFieldMap()

	return o
}

func (o *outletCuisine) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *outletCuisine) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 9)
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["created_by"] = o.CreatedBy
	o.fieldMap["modified_at"] = o.ModifiedAt
	o.fieldMap["modified_by"] = o.ModifiedBy
	o.fieldMap["deleted_at"] = o.DeletedAt
	o.fieldMap["deleted_by"] = o.DeletedBy
	o.fieldMap["outlet_cuisine_id"] = o.OutletCuisineID
	o.fieldMap["outlet_id"] = o.OutletID
	o.fieldMap["cuisine_id"] = o.CuisineID
}

func (o outletCuisine) clone(db *gorm.DB) outletCuisine {
	o.outletCuisineDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o outletCuisine) replaceDB(db *gorm.DB) outletCuisine {
	o.outletCuisineDo.ReplaceDB(db)
	return o
}

type outletCuisineDo struct{ gen.DO }

type IOutletCuisineDo interface {
	gen.SubQuery
	Debug() IOutletCuisineDo
	WithContext(ctx context.Context) IOutletCuisineDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOutletCuisineDo
	WriteDB() IOutletCuisineDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOutletCuisineDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOutletCuisineDo
	Not(conds ...gen.Condition) IOutletCuisineDo
	Or(conds ...gen.Condition) IOutletCuisineDo
	Select(conds ...field.Expr) IOutletCuisineDo
	Where(conds ...gen.Condition) IOutletCuisineDo
	Order(conds ...field.Expr) IOutletCuisineDo
	Distinct(cols ...field.Expr) IOutletCuisineDo
	Omit(cols ...field.Expr) IOutletCuisineDo
	Join(table schema.Tabler, on ...field.Expr) IOutletCuisineDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOutletCuisineDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOutletCuisineDo
	Group(cols ...field.Expr) IOutletCuisineDo
	Having(conds ...gen.Condition) IOutletCuisineDo
	Limit(limit int) IOutletCuisineDo
	Offset(offset int) IOutletCuisineDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOutletCuisineDo
	Unscoped() IOutletCuisineDo
	Create(values ...*model.OutletCuisine) error
	CreateInBatches(values []*model.OutletCuisine, batchSize int) error
	Save(values ...*model.OutletCuisine) error
	First() (*model.OutletCuisine, error)
	Take() (*model.OutletCuisine, error)
	Last() (*model.OutletCuisine, error)
	Find() ([]*model.OutletCuisine, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OutletCuisine, err error)
	FindInBatches(result *[]*model.OutletCuisine, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OutletCuisine) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOutletCuisineDo
	Assign(attrs ...field.AssignExpr) IOutletCuisineDo
	Joins(fields ...field.RelationField) IOutletCuisineDo
	Preload(fields ...field.RelationField) IOutletCuisineDo
	FirstOrInit() (*model.OutletCuisine, error)
	FirstOrCreate() (*model.OutletCuisine, error)
	FindByPage(offset int, limit int) (result []*model.OutletCuisine, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOutletCuisineDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o outletCuisineDo) Debug() IOutletCuisineDo {
	return o.withDO(o.DO.Debug())
}

func (o outletCuisineDo) WithContext(ctx context.Context) IOutletCuisineDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o outletCuisineDo) ReadDB() IOutletCuisineDo {
	return o.Clauses(dbresolver.Read)
}

func (o outletCuisineDo) WriteDB() IOutletCuisineDo {
	return o.Clauses(dbresolver.Write)
}

func (o outletCuisineDo) Session(config *gorm.Session) IOutletCuisineDo {
	return o.withDO(o.DO.Session(config))
}

func (o outletCuisineDo) Clauses(conds ...clause.Expression) IOutletCuisineDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o outletCuisineDo) Returning(value interface{}, columns ...string) IOutletCuisineDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o outletCuisineDo) Not(conds ...gen.Condition) IOutletCuisineDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o outletCuisineDo) Or(conds ...gen.Condition) IOutletCuisineDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o outletCuisineDo) Select(conds ...field.Expr) IOutletCuisineDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o outletCuisineDo) Where(conds ...gen.Condition) IOutletCuisineDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o outletCuisineDo) Order(conds ...field.Expr) IOutletCuisineDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o outletCuisineDo) Distinct(cols ...field.Expr) IOutletCuisineDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o outletCuisineDo) Omit(cols ...field.Expr) IOutletCuisineDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o outletCuisineDo) Join(table schema.Tabler, on ...field.Expr) IOutletCuisineDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o outletCuisineDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOutletCuisineDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o outletCuisineDo) RightJoin(table schema.Tabler, on ...field.Expr) IOutletCuisineDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o outletCuisineDo) Group(cols ...field.Expr) IOutletCuisineDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o outletCuisineDo) Having(conds ...gen.Condition) IOutletCuisineDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o outletCuisineDo) Limit(limit int) IOutletCuisineDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o outletCuisineDo) Offset(offset int) IOutletCuisineDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o outletCuisineDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOutletCuisineDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o outletCuisineDo) Unscoped() IOutletCuisineDo {
	return o.withDO(o.DO.Unscoped())
}

func (o outletCuisineDo) Create(values ...*model.OutletCuisine) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o outletCuisineDo) CreateInBatches(values []*model.OutletCuisine, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o outletCuisineDo) Save(values ...*model.OutletCuisine) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o outletCuisineDo) First() (*model.OutletCuisine, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OutletCuisine), nil
	}
}

func (o outletCuisineDo) Take() (*model.OutletCuisine, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OutletCuisine), nil
	}
}

func (o outletCuisineDo) Last() (*model.OutletCuisine, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OutletCuisine), nil
	}
}

func (o outletCuisineDo) Find() ([]*model.OutletCuisine, error) {
	result, err := o.DO.Find()
	return result.([]*model.OutletCuisine), err
}

func (o outletCuisineDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OutletCuisine, err error) {
	buf := make([]*model.OutletCuisine, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o outletCuisineDo) FindInBatches(result *[]*model.OutletCuisine, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o outletCuisineDo) Attrs(attrs ...field.AssignExpr) IOutletCuisineDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o outletCuisineDo) Assign(attrs ...field.AssignExpr) IOutletCuisineDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o outletCuisineDo) Joins(fields ...field.RelationField) IOutletCuisineDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o outletCuisineDo) Preload(fields ...field.RelationField) IOutletCuisineDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o outletCuisineDo) FirstOrInit() (*model.OutletCuisine, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OutletCuisine), nil
	}
}

func (o outletCuisineDo) FirstOrCreate() (*model.OutletCuisine, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OutletCuisine), nil
	}
}

func (o outletCuisineDo) FindByPage(offset int, limit int) (result []*model.OutletCuisine, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o outletCuisineDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o outletCuisineDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o outletCuisineDo) Delete(models ...*model.OutletCuisine) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *outletCuisineDo) withDO(do gen.Dao) *outletCuisineDo {
	o.DO = *do.(*gen.DO)
	return o
}
