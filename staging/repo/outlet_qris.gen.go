// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm_demo/staging/model"
)

func newOutletQri(db *gorm.DB, opts ...gen.DOOption) outletQri {
	_outletQri := outletQri{}

	_outletQri.outletQriDo.UseDB(db, opts...)
	_outletQri.outletQriDo.UseModel(&model.OutletQri{})

	tableName := _outletQri.outletQriDo.TableName()
	_outletQri.ALL = field.NewAsterisk(tableName)
	_outletQri.CreatedAt = field.NewInt64(tableName, "created_at")
	_outletQri.CreatedBy = field.NewString(tableName, "created_by")
	_outletQri.ModifiedAt = field.NewInt64(tableName, "modified_at")
	_outletQri.ModifiedBy = field.NewString(tableName, "modified_by")
	_outletQri.DeletedAt = field.NewInt64(tableName, "deleted_at")
	_outletQri.DeletedBy = field.NewString(tableName, "deleted_by")
	_outletQri.OutletQrisID = field.NewInt32(tableName, "outlet_qris_id")
	_outletQri.OutletID = field.NewString(tableName, "outlet_id")
	_outletQri.Nmid = field.NewString(tableName, "nmid")
	_outletQri.QrisCode = field.NewString(tableName, "qris_code")

	_outletQri.fillFieldMap()

	return _outletQri
}

type outletQri struct {
	outletQriDo

	ALL          field.Asterisk
	CreatedAt    field.Int64
	CreatedBy    field.String
	ModifiedAt   field.Int64
	ModifiedBy   field.String
	DeletedAt    field.Int64
	DeletedBy    field.String
	OutletQrisID field.Int32
	OutletID     field.String
	Nmid         field.String
	QrisCode     field.String

	fieldMap map[string]field.Expr
}

func (o outletQri) Table(newTableName string) *outletQri {
	o.outletQriDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o outletQri) As(alias string) *outletQri {
	o.outletQriDo.DO = *(o.outletQriDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *outletQri) updateTableName(table string) *outletQri {
	o.ALL = field.NewAsterisk(table)
	o.CreatedAt = field.NewInt64(table, "created_at")
	o.CreatedBy = field.NewString(table, "created_by")
	o.ModifiedAt = field.NewInt64(table, "modified_at")
	o.ModifiedBy = field.NewString(table, "modified_by")
	o.DeletedAt = field.NewInt64(table, "deleted_at")
	o.DeletedBy = field.NewString(table, "deleted_by")
	o.OutletQrisID = field.NewInt32(table, "outlet_qris_id")
	o.OutletID = field.NewString(table, "outlet_id")
	o.Nmid = field.NewString(table, "nmid")
	o.QrisCode = field.NewString(table, "qris_code")

	o.fillFieldMap()

	return o
}

func (o *outletQri) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *outletQri) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 10)
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["created_by"] = o.CreatedBy
	o.fieldMap["modified_at"] = o.ModifiedAt
	o.fieldMap["modified_by"] = o.ModifiedBy
	o.fieldMap["deleted_at"] = o.DeletedAt
	o.fieldMap["deleted_by"] = o.DeletedBy
	o.fieldMap["outlet_qris_id"] = o.OutletQrisID
	o.fieldMap["outlet_id"] = o.OutletID
	o.fieldMap["nmid"] = o.Nmid
	o.fieldMap["qris_code"] = o.QrisCode
}

func (o outletQri) clone(db *gorm.DB) outletQri {
	o.outletQriDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o outletQri) replaceDB(db *gorm.DB) outletQri {
	o.outletQriDo.ReplaceDB(db)
	return o
}

type outletQriDo struct{ gen.DO }

type IOutletQriDo interface {
	gen.SubQuery
	Debug() IOutletQriDo
	WithContext(ctx context.Context) IOutletQriDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOutletQriDo
	WriteDB() IOutletQriDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOutletQriDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOutletQriDo
	Not(conds ...gen.Condition) IOutletQriDo
	Or(conds ...gen.Condition) IOutletQriDo
	Select(conds ...field.Expr) IOutletQriDo
	Where(conds ...gen.Condition) IOutletQriDo
	Order(conds ...field.Expr) IOutletQriDo
	Distinct(cols ...field.Expr) IOutletQriDo
	Omit(cols ...field.Expr) IOutletQriDo
	Join(table schema.Tabler, on ...field.Expr) IOutletQriDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOutletQriDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOutletQriDo
	Group(cols ...field.Expr) IOutletQriDo
	Having(conds ...gen.Condition) IOutletQriDo
	Limit(limit int) IOutletQriDo
	Offset(offset int) IOutletQriDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOutletQriDo
	Unscoped() IOutletQriDo
	Create(values ...*model.OutletQri) error
	CreateInBatches(values []*model.OutletQri, batchSize int) error
	Save(values ...*model.OutletQri) error
	First() (*model.OutletQri, error)
	Take() (*model.OutletQri, error)
	Last() (*model.OutletQri, error)
	Find() ([]*model.OutletQri, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OutletQri, err error)
	FindInBatches(result *[]*model.OutletQri, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OutletQri) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOutletQriDo
	Assign(attrs ...field.AssignExpr) IOutletQriDo
	Joins(fields ...field.RelationField) IOutletQriDo
	Preload(fields ...field.RelationField) IOutletQriDo
	FirstOrInit() (*model.OutletQri, error)
	FirstOrCreate() (*model.OutletQri, error)
	FindByPage(offset int, limit int) (result []*model.OutletQri, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOutletQriDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o outletQriDo) Debug() IOutletQriDo {
	return o.withDO(o.DO.Debug())
}

func (o outletQriDo) WithContext(ctx context.Context) IOutletQriDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o outletQriDo) ReadDB() IOutletQriDo {
	return o.Clauses(dbresolver.Read)
}

func (o outletQriDo) WriteDB() IOutletQriDo {
	return o.Clauses(dbresolver.Write)
}

func (o outletQriDo) Session(config *gorm.Session) IOutletQriDo {
	return o.withDO(o.DO.Session(config))
}

func (o outletQriDo) Clauses(conds ...clause.Expression) IOutletQriDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o outletQriDo) Returning(value interface{}, columns ...string) IOutletQriDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o outletQriDo) Not(conds ...gen.Condition) IOutletQriDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o outletQriDo) Or(conds ...gen.Condition) IOutletQriDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o outletQriDo) Select(conds ...field.Expr) IOutletQriDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o outletQriDo) Where(conds ...gen.Condition) IOutletQriDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o outletQriDo) Order(conds ...field.Expr) IOutletQriDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o outletQriDo) Distinct(cols ...field.Expr) IOutletQriDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o outletQriDo) Omit(cols ...field.Expr) IOutletQriDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o outletQriDo) Join(table schema.Tabler, on ...field.Expr) IOutletQriDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o outletQriDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOutletQriDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o outletQriDo) RightJoin(table schema.Tabler, on ...field.Expr) IOutletQriDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o outletQriDo) Group(cols ...field.Expr) IOutletQriDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o outletQriDo) Having(conds ...gen.Condition) IOutletQriDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o outletQriDo) Limit(limit int) IOutletQriDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o outletQriDo) Offset(offset int) IOutletQriDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o outletQriDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOutletQriDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o outletQriDo) Unscoped() IOutletQriDo {
	return o.withDO(o.DO.Unscoped())
}

func (o outletQriDo) Create(values ...*model.OutletQri) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o outletQriDo) CreateInBatches(values []*model.OutletQri, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o outletQriDo) Save(values ...*model.OutletQri) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o outletQriDo) First() (*model.OutletQri, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OutletQri), nil
	}
}

func (o outletQriDo) Take() (*model.OutletQri, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OutletQri), nil
	}
}

func (o outletQriDo) Last() (*model.OutletQri, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OutletQri), nil
	}
}

func (o outletQriDo) Find() ([]*model.OutletQri, error) {
	result, err := o.DO.Find()
	return result.([]*model.OutletQri), err
}

func (o outletQriDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OutletQri, err error) {
	buf := make([]*model.OutletQri, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o outletQriDo) FindInBatches(result *[]*model.OutletQri, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o outletQriDo) Attrs(attrs ...field.AssignExpr) IOutletQriDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o outletQriDo) Assign(attrs ...field.AssignExpr) IOutletQriDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o outletQriDo) Joins(fields ...field.RelationField) IOutletQriDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o outletQriDo) Preload(fields ...field.RelationField) IOutletQriDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o outletQriDo) FirstOrInit() (*model.OutletQri, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OutletQri), nil
	}
}

func (o outletQriDo) FirstOrCreate() (*model.OutletQri, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OutletQri), nil
	}
}

func (o outletQriDo) FindByPage(offset int, limit int) (result []*model.OutletQri, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o outletQriDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o outletQriDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o outletQriDo) Delete(models ...*model.OutletQri) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *outletQriDo) withDO(do gen.Dao) *outletQriDo {
	o.DO = *do.(*gen.DO)
	return o
}
