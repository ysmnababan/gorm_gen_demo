// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm_demo/staging/model"
)

func newLogRecent(db *gorm.DB, opts ...gen.DOOption) logRecent {
	_logRecent := logRecent{}

	_logRecent.logRecentDo.UseDB(db, opts...)
	_logRecent.logRecentDo.UseModel(&model.LogRecent{})

	tableName := _logRecent.logRecentDo.TableName()
	_logRecent.ALL = field.NewAsterisk(tableName)
	_logRecent.CreatedAt = field.NewInt64(tableName, "created_at")
	_logRecent.CreatedBy = field.NewString(tableName, "created_by")
	_logRecent.ModifiedAt = field.NewInt64(tableName, "modified_at")
	_logRecent.ModifiedBy = field.NewString(tableName, "modified_by")
	_logRecent.DeletedAt = field.NewInt64(tableName, "deleted_at")
	_logRecent.DeletedBy = field.NewString(tableName, "deleted_by")
	_logRecent.LogRecentID = field.NewInt64(tableName, "log_recent_id")
	_logRecent.CustomerID = field.NewString(tableName, "customer_id")
	_logRecent.LocationID = field.NewString(tableName, "location_id")
	_logRecent.OutletID = field.NewString(tableName, "outlet_id")

	_logRecent.fillFieldMap()

	return _logRecent
}

type logRecent struct {
	logRecentDo

	ALL         field.Asterisk
	CreatedAt   field.Int64
	CreatedBy   field.String
	ModifiedAt  field.Int64
	ModifiedBy  field.String
	DeletedAt   field.Int64
	DeletedBy   field.String
	LogRecentID field.Int64
	CustomerID  field.String
	LocationID  field.String
	OutletID    field.String

	fieldMap map[string]field.Expr
}

func (l logRecent) Table(newTableName string) *logRecent {
	l.logRecentDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l logRecent) As(alias string) *logRecent {
	l.logRecentDo.DO = *(l.logRecentDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *logRecent) updateTableName(table string) *logRecent {
	l.ALL = field.NewAsterisk(table)
	l.CreatedAt = field.NewInt64(table, "created_at")
	l.CreatedBy = field.NewString(table, "created_by")
	l.ModifiedAt = field.NewInt64(table, "modified_at")
	l.ModifiedBy = field.NewString(table, "modified_by")
	l.DeletedAt = field.NewInt64(table, "deleted_at")
	l.DeletedBy = field.NewString(table, "deleted_by")
	l.LogRecentID = field.NewInt64(table, "log_recent_id")
	l.CustomerID = field.NewString(table, "customer_id")
	l.LocationID = field.NewString(table, "location_id")
	l.OutletID = field.NewString(table, "outlet_id")

	l.fillFieldMap()

	return l
}

func (l *logRecent) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *logRecent) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 10)
	l.fieldMap["created_at"] = l.CreatedAt
	l.fieldMap["created_by"] = l.CreatedBy
	l.fieldMap["modified_at"] = l.ModifiedAt
	l.fieldMap["modified_by"] = l.ModifiedBy
	l.fieldMap["deleted_at"] = l.DeletedAt
	l.fieldMap["deleted_by"] = l.DeletedBy
	l.fieldMap["log_recent_id"] = l.LogRecentID
	l.fieldMap["customer_id"] = l.CustomerID
	l.fieldMap["location_id"] = l.LocationID
	l.fieldMap["outlet_id"] = l.OutletID
}

func (l logRecent) clone(db *gorm.DB) logRecent {
	l.logRecentDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l logRecent) replaceDB(db *gorm.DB) logRecent {
	l.logRecentDo.ReplaceDB(db)
	return l
}

type logRecentDo struct{ gen.DO }

type ILogRecentDo interface {
	gen.SubQuery
	Debug() ILogRecentDo
	WithContext(ctx context.Context) ILogRecentDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILogRecentDo
	WriteDB() ILogRecentDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILogRecentDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILogRecentDo
	Not(conds ...gen.Condition) ILogRecentDo
	Or(conds ...gen.Condition) ILogRecentDo
	Select(conds ...field.Expr) ILogRecentDo
	Where(conds ...gen.Condition) ILogRecentDo
	Order(conds ...field.Expr) ILogRecentDo
	Distinct(cols ...field.Expr) ILogRecentDo
	Omit(cols ...field.Expr) ILogRecentDo
	Join(table schema.Tabler, on ...field.Expr) ILogRecentDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILogRecentDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILogRecentDo
	Group(cols ...field.Expr) ILogRecentDo
	Having(conds ...gen.Condition) ILogRecentDo
	Limit(limit int) ILogRecentDo
	Offset(offset int) ILogRecentDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILogRecentDo
	Unscoped() ILogRecentDo
	Create(values ...*model.LogRecent) error
	CreateInBatches(values []*model.LogRecent, batchSize int) error
	Save(values ...*model.LogRecent) error
	First() (*model.LogRecent, error)
	Take() (*model.LogRecent, error)
	Last() (*model.LogRecent, error)
	Find() ([]*model.LogRecent, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LogRecent, err error)
	FindInBatches(result *[]*model.LogRecent, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.LogRecent) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILogRecentDo
	Assign(attrs ...field.AssignExpr) ILogRecentDo
	Joins(fields ...field.RelationField) ILogRecentDo
	Preload(fields ...field.RelationField) ILogRecentDo
	FirstOrInit() (*model.LogRecent, error)
	FirstOrCreate() (*model.LogRecent, error)
	FindByPage(offset int, limit int) (result []*model.LogRecent, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILogRecentDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l logRecentDo) Debug() ILogRecentDo {
	return l.withDO(l.DO.Debug())
}

func (l logRecentDo) WithContext(ctx context.Context) ILogRecentDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l logRecentDo) ReadDB() ILogRecentDo {
	return l.Clauses(dbresolver.Read)
}

func (l logRecentDo) WriteDB() ILogRecentDo {
	return l.Clauses(dbresolver.Write)
}

func (l logRecentDo) Session(config *gorm.Session) ILogRecentDo {
	return l.withDO(l.DO.Session(config))
}

func (l logRecentDo) Clauses(conds ...clause.Expression) ILogRecentDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l logRecentDo) Returning(value interface{}, columns ...string) ILogRecentDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l logRecentDo) Not(conds ...gen.Condition) ILogRecentDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l logRecentDo) Or(conds ...gen.Condition) ILogRecentDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l logRecentDo) Select(conds ...field.Expr) ILogRecentDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l logRecentDo) Where(conds ...gen.Condition) ILogRecentDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l logRecentDo) Order(conds ...field.Expr) ILogRecentDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l logRecentDo) Distinct(cols ...field.Expr) ILogRecentDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l logRecentDo) Omit(cols ...field.Expr) ILogRecentDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l logRecentDo) Join(table schema.Tabler, on ...field.Expr) ILogRecentDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l logRecentDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILogRecentDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l logRecentDo) RightJoin(table schema.Tabler, on ...field.Expr) ILogRecentDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l logRecentDo) Group(cols ...field.Expr) ILogRecentDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l logRecentDo) Having(conds ...gen.Condition) ILogRecentDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l logRecentDo) Limit(limit int) ILogRecentDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l logRecentDo) Offset(offset int) ILogRecentDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l logRecentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILogRecentDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l logRecentDo) Unscoped() ILogRecentDo {
	return l.withDO(l.DO.Unscoped())
}

func (l logRecentDo) Create(values ...*model.LogRecent) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l logRecentDo) CreateInBatches(values []*model.LogRecent, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l logRecentDo) Save(values ...*model.LogRecent) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l logRecentDo) First() (*model.LogRecent, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogRecent), nil
	}
}

func (l logRecentDo) Take() (*model.LogRecent, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogRecent), nil
	}
}

func (l logRecentDo) Last() (*model.LogRecent, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogRecent), nil
	}
}

func (l logRecentDo) Find() ([]*model.LogRecent, error) {
	result, err := l.DO.Find()
	return result.([]*model.LogRecent), err
}

func (l logRecentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LogRecent, err error) {
	buf := make([]*model.LogRecent, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l logRecentDo) FindInBatches(result *[]*model.LogRecent, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l logRecentDo) Attrs(attrs ...field.AssignExpr) ILogRecentDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l logRecentDo) Assign(attrs ...field.AssignExpr) ILogRecentDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l logRecentDo) Joins(fields ...field.RelationField) ILogRecentDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l logRecentDo) Preload(fields ...field.RelationField) ILogRecentDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l logRecentDo) FirstOrInit() (*model.LogRecent, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogRecent), nil
	}
}

func (l logRecentDo) FirstOrCreate() (*model.LogRecent, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LogRecent), nil
	}
}

func (l logRecentDo) FindByPage(offset int, limit int) (result []*model.LogRecent, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l logRecentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l logRecentDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l logRecentDo) Delete(models ...*model.LogRecent) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *logRecentDo) withDO(do gen.Dao) *logRecentDo {
	l.DO = *do.(*gen.DO)
	return l
}
