// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm_demo/staging/model"
)

func newOutletFavorite(db *gorm.DB, opts ...gen.DOOption) outletFavorite {
	_outletFavorite := outletFavorite{}

	_outletFavorite.outletFavoriteDo.UseDB(db, opts...)
	_outletFavorite.outletFavoriteDo.UseModel(&model.OutletFavorite{})

	tableName := _outletFavorite.outletFavoriteDo.TableName()
	_outletFavorite.ALL = field.NewAsterisk(tableName)
	_outletFavorite.CreatedAt = field.NewInt64(tableName, "created_at")
	_outletFavorite.CreatedBy = field.NewString(tableName, "created_by")
	_outletFavorite.ModifiedAt = field.NewInt64(tableName, "modified_at")
	_outletFavorite.ModifiedBy = field.NewString(tableName, "modified_by")
	_outletFavorite.DeletedAt = field.NewInt64(tableName, "deleted_at")
	_outletFavorite.DeletedBy = field.NewString(tableName, "deleted_by")
	_outletFavorite.OutletFavoriteID = field.NewString(tableName, "outlet_favorite_id")
	_outletFavorite.OutletID = field.NewString(tableName, "outlet_id")
	_outletFavorite.CustomerID = field.NewString(tableName, "customer_id")

	_outletFavorite.fillFieldMap()

	return _outletFavorite
}

type outletFavorite struct {
	outletFavoriteDo

	ALL              field.Asterisk
	CreatedAt        field.Int64
	CreatedBy        field.String
	ModifiedAt       field.Int64
	ModifiedBy       field.String
	DeletedAt        field.Int64
	DeletedBy        field.String
	OutletFavoriteID field.String
	OutletID         field.String
	CustomerID       field.String

	fieldMap map[string]field.Expr
}

func (o outletFavorite) Table(newTableName string) *outletFavorite {
	o.outletFavoriteDo.UseTable(newTableName)
	return o.updateTableName(newTableName)
}

func (o outletFavorite) As(alias string) *outletFavorite {
	o.outletFavoriteDo.DO = *(o.outletFavoriteDo.As(alias).(*gen.DO))
	return o.updateTableName(alias)
}

func (o *outletFavorite) updateTableName(table string) *outletFavorite {
	o.ALL = field.NewAsterisk(table)
	o.CreatedAt = field.NewInt64(table, "created_at")
	o.CreatedBy = field.NewString(table, "created_by")
	o.ModifiedAt = field.NewInt64(table, "modified_at")
	o.ModifiedBy = field.NewString(table, "modified_by")
	o.DeletedAt = field.NewInt64(table, "deleted_at")
	o.DeletedBy = field.NewString(table, "deleted_by")
	o.OutletFavoriteID = field.NewString(table, "outlet_favorite_id")
	o.OutletID = field.NewString(table, "outlet_id")
	o.CustomerID = field.NewString(table, "customer_id")

	o.fillFieldMap()

	return o
}

func (o *outletFavorite) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := o.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (o *outletFavorite) fillFieldMap() {
	o.fieldMap = make(map[string]field.Expr, 9)
	o.fieldMap["created_at"] = o.CreatedAt
	o.fieldMap["created_by"] = o.CreatedBy
	o.fieldMap["modified_at"] = o.ModifiedAt
	o.fieldMap["modified_by"] = o.ModifiedBy
	o.fieldMap["deleted_at"] = o.DeletedAt
	o.fieldMap["deleted_by"] = o.DeletedBy
	o.fieldMap["outlet_favorite_id"] = o.OutletFavoriteID
	o.fieldMap["outlet_id"] = o.OutletID
	o.fieldMap["customer_id"] = o.CustomerID
}

func (o outletFavorite) clone(db *gorm.DB) outletFavorite {
	o.outletFavoriteDo.ReplaceConnPool(db.Statement.ConnPool)
	return o
}

func (o outletFavorite) replaceDB(db *gorm.DB) outletFavorite {
	o.outletFavoriteDo.ReplaceDB(db)
	return o
}

type outletFavoriteDo struct{ gen.DO }

type IOutletFavoriteDo interface {
	gen.SubQuery
	Debug() IOutletFavoriteDo
	WithContext(ctx context.Context) IOutletFavoriteDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IOutletFavoriteDo
	WriteDB() IOutletFavoriteDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IOutletFavoriteDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IOutletFavoriteDo
	Not(conds ...gen.Condition) IOutletFavoriteDo
	Or(conds ...gen.Condition) IOutletFavoriteDo
	Select(conds ...field.Expr) IOutletFavoriteDo
	Where(conds ...gen.Condition) IOutletFavoriteDo
	Order(conds ...field.Expr) IOutletFavoriteDo
	Distinct(cols ...field.Expr) IOutletFavoriteDo
	Omit(cols ...field.Expr) IOutletFavoriteDo
	Join(table schema.Tabler, on ...field.Expr) IOutletFavoriteDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IOutletFavoriteDo
	RightJoin(table schema.Tabler, on ...field.Expr) IOutletFavoriteDo
	Group(cols ...field.Expr) IOutletFavoriteDo
	Having(conds ...gen.Condition) IOutletFavoriteDo
	Limit(limit int) IOutletFavoriteDo
	Offset(offset int) IOutletFavoriteDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IOutletFavoriteDo
	Unscoped() IOutletFavoriteDo
	Create(values ...*model.OutletFavorite) error
	CreateInBatches(values []*model.OutletFavorite, batchSize int) error
	Save(values ...*model.OutletFavorite) error
	First() (*model.OutletFavorite, error)
	Take() (*model.OutletFavorite, error)
	Last() (*model.OutletFavorite, error)
	Find() ([]*model.OutletFavorite, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OutletFavorite, err error)
	FindInBatches(result *[]*model.OutletFavorite, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.OutletFavorite) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IOutletFavoriteDo
	Assign(attrs ...field.AssignExpr) IOutletFavoriteDo
	Joins(fields ...field.RelationField) IOutletFavoriteDo
	Preload(fields ...field.RelationField) IOutletFavoriteDo
	FirstOrInit() (*model.OutletFavorite, error)
	FirstOrCreate() (*model.OutletFavorite, error)
	FindByPage(offset int, limit int) (result []*model.OutletFavorite, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IOutletFavoriteDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (o outletFavoriteDo) Debug() IOutletFavoriteDo {
	return o.withDO(o.DO.Debug())
}

func (o outletFavoriteDo) WithContext(ctx context.Context) IOutletFavoriteDo {
	return o.withDO(o.DO.WithContext(ctx))
}

func (o outletFavoriteDo) ReadDB() IOutletFavoriteDo {
	return o.Clauses(dbresolver.Read)
}

func (o outletFavoriteDo) WriteDB() IOutletFavoriteDo {
	return o.Clauses(dbresolver.Write)
}

func (o outletFavoriteDo) Session(config *gorm.Session) IOutletFavoriteDo {
	return o.withDO(o.DO.Session(config))
}

func (o outletFavoriteDo) Clauses(conds ...clause.Expression) IOutletFavoriteDo {
	return o.withDO(o.DO.Clauses(conds...))
}

func (o outletFavoriteDo) Returning(value interface{}, columns ...string) IOutletFavoriteDo {
	return o.withDO(o.DO.Returning(value, columns...))
}

func (o outletFavoriteDo) Not(conds ...gen.Condition) IOutletFavoriteDo {
	return o.withDO(o.DO.Not(conds...))
}

func (o outletFavoriteDo) Or(conds ...gen.Condition) IOutletFavoriteDo {
	return o.withDO(o.DO.Or(conds...))
}

func (o outletFavoriteDo) Select(conds ...field.Expr) IOutletFavoriteDo {
	return o.withDO(o.DO.Select(conds...))
}

func (o outletFavoriteDo) Where(conds ...gen.Condition) IOutletFavoriteDo {
	return o.withDO(o.DO.Where(conds...))
}

func (o outletFavoriteDo) Order(conds ...field.Expr) IOutletFavoriteDo {
	return o.withDO(o.DO.Order(conds...))
}

func (o outletFavoriteDo) Distinct(cols ...field.Expr) IOutletFavoriteDo {
	return o.withDO(o.DO.Distinct(cols...))
}

func (o outletFavoriteDo) Omit(cols ...field.Expr) IOutletFavoriteDo {
	return o.withDO(o.DO.Omit(cols...))
}

func (o outletFavoriteDo) Join(table schema.Tabler, on ...field.Expr) IOutletFavoriteDo {
	return o.withDO(o.DO.Join(table, on...))
}

func (o outletFavoriteDo) LeftJoin(table schema.Tabler, on ...field.Expr) IOutletFavoriteDo {
	return o.withDO(o.DO.LeftJoin(table, on...))
}

func (o outletFavoriteDo) RightJoin(table schema.Tabler, on ...field.Expr) IOutletFavoriteDo {
	return o.withDO(o.DO.RightJoin(table, on...))
}

func (o outletFavoriteDo) Group(cols ...field.Expr) IOutletFavoriteDo {
	return o.withDO(o.DO.Group(cols...))
}

func (o outletFavoriteDo) Having(conds ...gen.Condition) IOutletFavoriteDo {
	return o.withDO(o.DO.Having(conds...))
}

func (o outletFavoriteDo) Limit(limit int) IOutletFavoriteDo {
	return o.withDO(o.DO.Limit(limit))
}

func (o outletFavoriteDo) Offset(offset int) IOutletFavoriteDo {
	return o.withDO(o.DO.Offset(offset))
}

func (o outletFavoriteDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IOutletFavoriteDo {
	return o.withDO(o.DO.Scopes(funcs...))
}

func (o outletFavoriteDo) Unscoped() IOutletFavoriteDo {
	return o.withDO(o.DO.Unscoped())
}

func (o outletFavoriteDo) Create(values ...*model.OutletFavorite) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Create(values)
}

func (o outletFavoriteDo) CreateInBatches(values []*model.OutletFavorite, batchSize int) error {
	return o.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (o outletFavoriteDo) Save(values ...*model.OutletFavorite) error {
	if len(values) == 0 {
		return nil
	}
	return o.DO.Save(values)
}

func (o outletFavoriteDo) First() (*model.OutletFavorite, error) {
	if result, err := o.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.OutletFavorite), nil
	}
}

func (o outletFavoriteDo) Take() (*model.OutletFavorite, error) {
	if result, err := o.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.OutletFavorite), nil
	}
}

func (o outletFavoriteDo) Last() (*model.OutletFavorite, error) {
	if result, err := o.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.OutletFavorite), nil
	}
}

func (o outletFavoriteDo) Find() ([]*model.OutletFavorite, error) {
	result, err := o.DO.Find()
	return result.([]*model.OutletFavorite), err
}

func (o outletFavoriteDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.OutletFavorite, err error) {
	buf := make([]*model.OutletFavorite, 0, batchSize)
	err = o.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (o outletFavoriteDo) FindInBatches(result *[]*model.OutletFavorite, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return o.DO.FindInBatches(result, batchSize, fc)
}

func (o outletFavoriteDo) Attrs(attrs ...field.AssignExpr) IOutletFavoriteDo {
	return o.withDO(o.DO.Attrs(attrs...))
}

func (o outletFavoriteDo) Assign(attrs ...field.AssignExpr) IOutletFavoriteDo {
	return o.withDO(o.DO.Assign(attrs...))
}

func (o outletFavoriteDo) Joins(fields ...field.RelationField) IOutletFavoriteDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Joins(_f))
	}
	return &o
}

func (o outletFavoriteDo) Preload(fields ...field.RelationField) IOutletFavoriteDo {
	for _, _f := range fields {
		o = *o.withDO(o.DO.Preload(_f))
	}
	return &o
}

func (o outletFavoriteDo) FirstOrInit() (*model.OutletFavorite, error) {
	if result, err := o.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.OutletFavorite), nil
	}
}

func (o outletFavoriteDo) FirstOrCreate() (*model.OutletFavorite, error) {
	if result, err := o.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.OutletFavorite), nil
	}
}

func (o outletFavoriteDo) FindByPage(offset int, limit int) (result []*model.OutletFavorite, count int64, err error) {
	result, err = o.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = o.Offset(-1).Limit(-1).Count()
	return
}

func (o outletFavoriteDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = o.Count()
	if err != nil {
		return
	}

	err = o.Offset(offset).Limit(limit).Scan(result)
	return
}

func (o outletFavoriteDo) Scan(result interface{}) (err error) {
	return o.DO.Scan(result)
}

func (o outletFavoriteDo) Delete(models ...*model.OutletFavorite) (result gen.ResultInfo, err error) {
	return o.DO.Delete(models)
}

func (o *outletFavoriteDo) withDO(do gen.Dao) *outletFavoriteDo {
	o.DO = *do.(*gen.DO)
	return o
}
