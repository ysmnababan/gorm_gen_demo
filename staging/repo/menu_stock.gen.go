// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm_demo/staging/model"
)

func newMenuStock(db *gorm.DB, opts ...gen.DOOption) menuStock {
	_menuStock := menuStock{}

	_menuStock.menuStockDo.UseDB(db, opts...)
	_menuStock.menuStockDo.UseModel(&model.MenuStock{})

	tableName := _menuStock.menuStockDo.TableName()
	_menuStock.ALL = field.NewAsterisk(tableName)
	_menuStock.CreatedAt = field.NewInt64(tableName, "created_at")
	_menuStock.CreatedBy = field.NewString(tableName, "created_by")
	_menuStock.ModifiedAt = field.NewInt64(tableName, "modified_at")
	_menuStock.ModifiedBy = field.NewString(tableName, "modified_by")
	_menuStock.DeletedAt = field.NewInt64(tableName, "deleted_at")
	_menuStock.DeletedBy = field.NewString(tableName, "deleted_by")
	_menuStock.MenuStockID = field.NewInt64(tableName, "menu_stock_id")
	_menuStock.OutletMenuID = field.NewString(tableName, "outlet_menu_id")
	_menuStock.IsAvailable = field.NewBool(tableName, "is_available")

	_menuStock.fillFieldMap()

	return _menuStock
}

type menuStock struct {
	menuStockDo

	ALL          field.Asterisk
	CreatedAt    field.Int64
	CreatedBy    field.String
	ModifiedAt   field.Int64
	ModifiedBy   field.String
	DeletedAt    field.Int64
	DeletedBy    field.String
	MenuStockID  field.Int64
	OutletMenuID field.String
	IsAvailable  field.Bool

	fieldMap map[string]field.Expr
}

func (m menuStock) Table(newTableName string) *menuStock {
	m.menuStockDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m menuStock) As(alias string) *menuStock {
	m.menuStockDo.DO = *(m.menuStockDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *menuStock) updateTableName(table string) *menuStock {
	m.ALL = field.NewAsterisk(table)
	m.CreatedAt = field.NewInt64(table, "created_at")
	m.CreatedBy = field.NewString(table, "created_by")
	m.ModifiedAt = field.NewInt64(table, "modified_at")
	m.ModifiedBy = field.NewString(table, "modified_by")
	m.DeletedAt = field.NewInt64(table, "deleted_at")
	m.DeletedBy = field.NewString(table, "deleted_by")
	m.MenuStockID = field.NewInt64(table, "menu_stock_id")
	m.OutletMenuID = field.NewString(table, "outlet_menu_id")
	m.IsAvailable = field.NewBool(table, "is_available")

	m.fillFieldMap()

	return m
}

func (m *menuStock) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *menuStock) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 9)
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["created_by"] = m.CreatedBy
	m.fieldMap["modified_at"] = m.ModifiedAt
	m.fieldMap["modified_by"] = m.ModifiedBy
	m.fieldMap["deleted_at"] = m.DeletedAt
	m.fieldMap["deleted_by"] = m.DeletedBy
	m.fieldMap["menu_stock_id"] = m.MenuStockID
	m.fieldMap["outlet_menu_id"] = m.OutletMenuID
	m.fieldMap["is_available"] = m.IsAvailable
}

func (m menuStock) clone(db *gorm.DB) menuStock {
	m.menuStockDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m menuStock) replaceDB(db *gorm.DB) menuStock {
	m.menuStockDo.ReplaceDB(db)
	return m
}

type menuStockDo struct{ gen.DO }

type IMenuStockDo interface {
	gen.SubQuery
	Debug() IMenuStockDo
	WithContext(ctx context.Context) IMenuStockDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMenuStockDo
	WriteDB() IMenuStockDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMenuStockDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMenuStockDo
	Not(conds ...gen.Condition) IMenuStockDo
	Or(conds ...gen.Condition) IMenuStockDo
	Select(conds ...field.Expr) IMenuStockDo
	Where(conds ...gen.Condition) IMenuStockDo
	Order(conds ...field.Expr) IMenuStockDo
	Distinct(cols ...field.Expr) IMenuStockDo
	Omit(cols ...field.Expr) IMenuStockDo
	Join(table schema.Tabler, on ...field.Expr) IMenuStockDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMenuStockDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMenuStockDo
	Group(cols ...field.Expr) IMenuStockDo
	Having(conds ...gen.Condition) IMenuStockDo
	Limit(limit int) IMenuStockDo
	Offset(offset int) IMenuStockDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMenuStockDo
	Unscoped() IMenuStockDo
	Create(values ...*model.MenuStock) error
	CreateInBatches(values []*model.MenuStock, batchSize int) error
	Save(values ...*model.MenuStock) error
	First() (*model.MenuStock, error)
	Take() (*model.MenuStock, error)
	Last() (*model.MenuStock, error)
	Find() ([]*model.MenuStock, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MenuStock, err error)
	FindInBatches(result *[]*model.MenuStock, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MenuStock) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMenuStockDo
	Assign(attrs ...field.AssignExpr) IMenuStockDo
	Joins(fields ...field.RelationField) IMenuStockDo
	Preload(fields ...field.RelationField) IMenuStockDo
	FirstOrInit() (*model.MenuStock, error)
	FirstOrCreate() (*model.MenuStock, error)
	FindByPage(offset int, limit int) (result []*model.MenuStock, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMenuStockDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m menuStockDo) Debug() IMenuStockDo {
	return m.withDO(m.DO.Debug())
}

func (m menuStockDo) WithContext(ctx context.Context) IMenuStockDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m menuStockDo) ReadDB() IMenuStockDo {
	return m.Clauses(dbresolver.Read)
}

func (m menuStockDo) WriteDB() IMenuStockDo {
	return m.Clauses(dbresolver.Write)
}

func (m menuStockDo) Session(config *gorm.Session) IMenuStockDo {
	return m.withDO(m.DO.Session(config))
}

func (m menuStockDo) Clauses(conds ...clause.Expression) IMenuStockDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m menuStockDo) Returning(value interface{}, columns ...string) IMenuStockDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m menuStockDo) Not(conds ...gen.Condition) IMenuStockDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m menuStockDo) Or(conds ...gen.Condition) IMenuStockDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m menuStockDo) Select(conds ...field.Expr) IMenuStockDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m menuStockDo) Where(conds ...gen.Condition) IMenuStockDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m menuStockDo) Order(conds ...field.Expr) IMenuStockDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m menuStockDo) Distinct(cols ...field.Expr) IMenuStockDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m menuStockDo) Omit(cols ...field.Expr) IMenuStockDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m menuStockDo) Join(table schema.Tabler, on ...field.Expr) IMenuStockDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m menuStockDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMenuStockDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m menuStockDo) RightJoin(table schema.Tabler, on ...field.Expr) IMenuStockDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m menuStockDo) Group(cols ...field.Expr) IMenuStockDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m menuStockDo) Having(conds ...gen.Condition) IMenuStockDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m menuStockDo) Limit(limit int) IMenuStockDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m menuStockDo) Offset(offset int) IMenuStockDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m menuStockDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMenuStockDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m menuStockDo) Unscoped() IMenuStockDo {
	return m.withDO(m.DO.Unscoped())
}

func (m menuStockDo) Create(values ...*model.MenuStock) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m menuStockDo) CreateInBatches(values []*model.MenuStock, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m menuStockDo) Save(values ...*model.MenuStock) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m menuStockDo) First() (*model.MenuStock, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MenuStock), nil
	}
}

func (m menuStockDo) Take() (*model.MenuStock, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MenuStock), nil
	}
}

func (m menuStockDo) Last() (*model.MenuStock, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MenuStock), nil
	}
}

func (m menuStockDo) Find() ([]*model.MenuStock, error) {
	result, err := m.DO.Find()
	return result.([]*model.MenuStock), err
}

func (m menuStockDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MenuStock, err error) {
	buf := make([]*model.MenuStock, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m menuStockDo) FindInBatches(result *[]*model.MenuStock, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m menuStockDo) Attrs(attrs ...field.AssignExpr) IMenuStockDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m menuStockDo) Assign(attrs ...field.AssignExpr) IMenuStockDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m menuStockDo) Joins(fields ...field.RelationField) IMenuStockDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m menuStockDo) Preload(fields ...field.RelationField) IMenuStockDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m menuStockDo) FirstOrInit() (*model.MenuStock, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MenuStock), nil
	}
}

func (m menuStockDo) FirstOrCreate() (*model.MenuStock, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MenuStock), nil
	}
}

func (m menuStockDo) FindByPage(offset int, limit int) (result []*model.MenuStock, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m menuStockDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m menuStockDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m menuStockDo) Delete(models ...*model.MenuStock) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *menuStockDo) withDO(do gen.Dao) *menuStockDo {
	m.DO = *do.(*gen.DO)
	return m
}
