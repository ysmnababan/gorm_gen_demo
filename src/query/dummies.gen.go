// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gorm_demo/src/model"
)

func newDummy(db *gorm.DB, opts ...gen.DOOption) dummy {
	_dummy := dummy{}

	_dummy.dummyDo.UseDB(db, opts...)
	_dummy.dummyDo.UseModel(&model.Dummy{})

	tableName := _dummy.dummyDo.TableName()
	_dummy.ALL = field.NewAsterisk(tableName)
	_dummy.ID = field.NewInt64(tableName, "id")
	_dummy.Name = field.NewString(tableName, "name")

	_dummy.fillFieldMap()

	return _dummy
}

type dummy struct {
	dummyDo

	ALL  field.Asterisk
	ID   field.Int64
	Name field.String

	fieldMap map[string]field.Expr
}

func (d dummy) Table(newTableName string) *dummy {
	d.dummyDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dummy) As(alias string) *dummy {
	d.dummyDo.DO = *(d.dummyDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dummy) updateTableName(table string) *dummy {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.Name = field.NewString(table, "name")

	d.fillFieldMap()

	return d
}

func (d *dummy) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dummy) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 2)
	d.fieldMap["id"] = d.ID
	d.fieldMap["name"] = d.Name
}

func (d dummy) clone(db *gorm.DB) dummy {
	d.dummyDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dummy) replaceDB(db *gorm.DB) dummy {
	d.dummyDo.ReplaceDB(db)
	return d
}

type dummyDo struct{ gen.DO }

type IDummyDo interface {
	gen.SubQuery
	Debug() IDummyDo
	WithContext(ctx context.Context) IDummyDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDummyDo
	WriteDB() IDummyDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDummyDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDummyDo
	Not(conds ...gen.Condition) IDummyDo
	Or(conds ...gen.Condition) IDummyDo
	Select(conds ...field.Expr) IDummyDo
	Where(conds ...gen.Condition) IDummyDo
	Order(conds ...field.Expr) IDummyDo
	Distinct(cols ...field.Expr) IDummyDo
	Omit(cols ...field.Expr) IDummyDo
	Join(table schema.Tabler, on ...field.Expr) IDummyDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDummyDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDummyDo
	Group(cols ...field.Expr) IDummyDo
	Having(conds ...gen.Condition) IDummyDo
	Limit(limit int) IDummyDo
	Offset(offset int) IDummyDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDummyDo
	Unscoped() IDummyDo
	Create(values ...*model.Dummy) error
	CreateInBatches(values []*model.Dummy, batchSize int) error
	Save(values ...*model.Dummy) error
	First() (*model.Dummy, error)
	Take() (*model.Dummy, error)
	Last() (*model.Dummy, error)
	Find() ([]*model.Dummy, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Dummy, err error)
	FindInBatches(result *[]*model.Dummy, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Dummy) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDummyDo
	Assign(attrs ...field.AssignExpr) IDummyDo
	Joins(fields ...field.RelationField) IDummyDo
	Preload(fields ...field.RelationField) IDummyDo
	FirstOrInit() (*model.Dummy, error)
	FirstOrCreate() (*model.Dummy, error)
	FindByPage(offset int, limit int) (result []*model.Dummy, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDummyDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dummyDo) Debug() IDummyDo {
	return d.withDO(d.DO.Debug())
}

func (d dummyDo) WithContext(ctx context.Context) IDummyDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dummyDo) ReadDB() IDummyDo {
	return d.Clauses(dbresolver.Read)
}

func (d dummyDo) WriteDB() IDummyDo {
	return d.Clauses(dbresolver.Write)
}

func (d dummyDo) Session(config *gorm.Session) IDummyDo {
	return d.withDO(d.DO.Session(config))
}

func (d dummyDo) Clauses(conds ...clause.Expression) IDummyDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dummyDo) Returning(value interface{}, columns ...string) IDummyDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dummyDo) Not(conds ...gen.Condition) IDummyDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dummyDo) Or(conds ...gen.Condition) IDummyDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dummyDo) Select(conds ...field.Expr) IDummyDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dummyDo) Where(conds ...gen.Condition) IDummyDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dummyDo) Order(conds ...field.Expr) IDummyDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dummyDo) Distinct(cols ...field.Expr) IDummyDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dummyDo) Omit(cols ...field.Expr) IDummyDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dummyDo) Join(table schema.Tabler, on ...field.Expr) IDummyDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dummyDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDummyDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dummyDo) RightJoin(table schema.Tabler, on ...field.Expr) IDummyDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dummyDo) Group(cols ...field.Expr) IDummyDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dummyDo) Having(conds ...gen.Condition) IDummyDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dummyDo) Limit(limit int) IDummyDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dummyDo) Offset(offset int) IDummyDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dummyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDummyDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dummyDo) Unscoped() IDummyDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dummyDo) Create(values ...*model.Dummy) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dummyDo) CreateInBatches(values []*model.Dummy, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dummyDo) Save(values ...*model.Dummy) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dummyDo) First() (*model.Dummy, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dummy), nil
	}
}

func (d dummyDo) Take() (*model.Dummy, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dummy), nil
	}
}

func (d dummyDo) Last() (*model.Dummy, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dummy), nil
	}
}

func (d dummyDo) Find() ([]*model.Dummy, error) {
	result, err := d.DO.Find()
	return result.([]*model.Dummy), err
}

func (d dummyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Dummy, err error) {
	buf := make([]*model.Dummy, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dummyDo) FindInBatches(result *[]*model.Dummy, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dummyDo) Attrs(attrs ...field.AssignExpr) IDummyDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dummyDo) Assign(attrs ...field.AssignExpr) IDummyDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dummyDo) Joins(fields ...field.RelationField) IDummyDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dummyDo) Preload(fields ...field.RelationField) IDummyDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dummyDo) FirstOrInit() (*model.Dummy, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dummy), nil
	}
}

func (d dummyDo) FirstOrCreate() (*model.Dummy, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Dummy), nil
	}
}

func (d dummyDo) FindByPage(offset int, limit int) (result []*model.Dummy, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dummyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dummyDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dummyDo) Delete(models ...*model.Dummy) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dummyDo) withDO(do gen.Dao) *dummyDo {
	d.DO = *do.(*gen.DO)
	return d
}
